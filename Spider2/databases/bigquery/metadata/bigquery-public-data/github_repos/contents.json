{
    "table_name": "contents",
    "table_fullname": "bigquery-public-data.github_repos.contents",
    "column_names": [
        "id",
        "size",
        "content",
        "binary",
        "copies"
    ],
    "column_types": [
        "STRING",
        "INT64",
        "STRING",
        "BOOL",
        "INT64"
    ],
    "nested_column_names": [
        "id",
        "size",
        "content",
        "binary",
        "copies"
    ],
    "nested_column_types": [
        "STRING",
        "INT64",
        "STRING",
        "BOOL",
        "INT64"
    ],
    "description": [
        null,
        null,
        null,
        null,
        null
    ],
    "sample_rows": [
        {
            "id": "b13f733d487dce441a11259c0bc0f1cdd56a4b90",
            "size": 840,
            "content": "/*\n *  /MathJax/localization/fi/HelpDialog.js\n *\n *  Copyright (c) 2009-2015 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nMathJax.Localization.addTranslation(\"fi\",\"HelpDialog\",{version:\"2.6.0\",isLoaded:true,strings:{}});MathJax.Ajax.loadComplete(\"[MathJax]/localization/fi/HelpDialog.js\");\n",
            "binary": false,
            "copies": 256
        },
        {
            "id": "1002ec66e4728a51a0f0e58966e8cf2d9e2d7529",
            "size": 1628,
            "content": "\"use strict\";angular.module(\"ngLocale\",[],[\"$provide\",function(e){function i(e){e+=\"\";var i=e.indexOf(\".\");return i==-1?0:e.length-i-1}function r(e,r){var a=r;void 0===a&&(a=Math.min(i(e),3));var m=Math.pow(10,a),n=(e*m|0)%m;return{v:a,f:n}}var a={ZERO:\"zero\",ONE:\"one\",TWO:\"two\",FEW:\"few\",MANY:\"many\",OTHER:\"other\"};e.value(\"$locale\",{DATETIME_FORMATS:{AMPMS:[\"a.m.\",\"p.m.\"],DAY:[\"duminic\u0103\",\"luni\",\"mar\u021bi\",\"miercuri\",\"joi\",\"vineri\",\"s\u00e2mb\u0103t\u0103\"],ERANAMES:[\"\u00eenainte de Hristos\",\"dup\u0103 Hristos\"],ERAS:[\"\u00ee.Hr.\",\"d.Hr.\"],FIRSTDAYOFWEEK:0,MONTH:[\"ianuarie\",\"februarie\",\"martie\",\"aprilie\",\"mai\",\"iunie\",\"iulie\",\"august\",\"septembrie\",\"octombrie\",\"noiembrie\",\"decembrie\"],SHORTDAY:[\"Dum\",\"Lun\",\"Mar\",\"Mie\",\"Joi\",\"Vin\",\"S\u00e2m\"],SHORTMONTH:[\"ian.\",\"feb.\",\"mar.\",\"apr.\",\"mai\",\"iun.\",\"iul.\",\"aug.\",\"sept.\",\"oct.\",\"nov.\",\"dec.\"],STANDALONEMONTH:[\"Ianuarie\",\"Februarie\",\"Martie\",\"Aprilie\",\"Mai\",\"Iunie\",\"Iulie\",\"August\",\"Septembrie\",\"Octombrie\",\"Noiembrie\",\"Decembrie\"],WEEKENDRANGE:[5,6],fullDate:\"EEEE, d MMMM y\",longDate:\"d MMMM y\",medium:\"d MMM y HH:mm:ss\",mediumDate:\"d MMM y\",mediumTime:\"HH:mm:ss\",short:\"dd.MM.y HH:mm\",shortDate:\"dd.MM.y\",shortTime:\"HH:mm\"},NUMBER_FORMATS:{CURRENCY_SYM:\"MDL\",DECIMAL_SEP:\",\",GROUP_SEP:\".\",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:\"-\",negSuf:\"\",posPre:\"\",posSuf:\"\"},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:\"-\",negSuf:\"\u00a0\u00a4\",posPre:\"\",posSuf:\"\u00a0\u00a4\"}]},id:\"ro-md\",localeID:\"ro_MD\",pluralCat:function(e,i){var m=0|e,n=r(e,i);return 1==m&&0==n.v?a.ONE:0!=n.v||0==e||1!=e&&e%100>=1&&e%100<=19?a.FEW:a.OTHER}})}]);\n//# sourceMappingURL=angular-locale_ro-md.min.js.map",
            "binary": false,
            "copies": 256
        },
        {
            "id": "6357efb01b93093eb14f8574f8865bd08a5bd48f",
            "size": 12045,
            "content": "/******************************************************************************\n *\n * Name: acresrc.h - Resource Manager function prototypes\n *\n *****************************************************************************/\n\n/*\n * Copyright (C) 2000 - 2015, Intel Corp.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions, and the following disclaimer,\n *    without modification.\n * 2. Redistributions in binary form must reproduce at minimum a disclaimer\n *    substantially similar to the \"NO WARRANTY\" disclaimer below\n *    (\"Disclaimer\") and any redistribution must be conditioned upon\n *    including a substantially similar Disclaimer requirement for further\n *    binary redistribution.\n * 3. Neither the names of the above-listed copyright holders nor the names\n *    of any contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * Alternatively, this software may be distributed under the terms of the\n * GNU General Public License (\"GPL\") version 2 as published by the Free\n * Software Foundation.\n *\n * NO WARRANTY\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGES.\n */\n\n#ifndef __ACRESRC_H__\n#define __ACRESRC_H__\n\n/* Need the AML resource descriptor structs */\n\n#include \"amlresrc.h\"\n\n/*\n * If possible, pack the following structures to byte alignment, since we\n * don't care about performance for debug output. Two cases where we cannot\n * pack the structures:\n *\n * 1) Hardware does not support misaligned memory transfers\n * 2) Compiler does not support pointers within packed structures\n */\n#if (!defined(ACPI_MISALIGNMENT_NOT_SUPPORTED) && !defined(ACPI_PACKED_POINTERS_NOT_SUPPORTED))\n#pragma pack(1)\n#endif\n\n/*\n * Individual entry for the resource conversion tables\n */\ntypedef const struct acpi_rsconvert_info {\n\tu8 opcode;\n\tu8 resource_offset;\n\tu8 aml_offset;\n\tu8 value;\n\n} acpi_rsconvert_info;\n\n/* Resource conversion opcodes */\n\ntypedef enum {\n\tACPI_RSC_INITGET = 0,\n\tACPI_RSC_INITSET,\n\tACPI_RSC_FLAGINIT,\n\tACPI_RSC_1BITFLAG,\n\tACPI_RSC_2BITFLAG,\n\tACPI_RSC_3BITFLAG,\n\tACPI_RSC_ADDRESS,\n\tACPI_RSC_BITMASK,\n\tACPI_RSC_BITMASK16,\n\tACPI_RSC_COUNT,\n\tACPI_RSC_COUNT16,\n\tACPI_RSC_COUNT_GPIO_PIN,\n\tACPI_RSC_COUNT_GPIO_RES,\n\tACPI_RSC_COUNT_GPIO_VEN,\n\tACPI_RSC_COUNT_SERIAL_RES,\n\tACPI_RSC_COUNT_SERIAL_VEN,\n\tACPI_RSC_DATA8,\n\tACPI_RSC_EXIT_EQ,\n\tACPI_RSC_EXIT_LE,\n\tACPI_RSC_EXIT_NE,\n\tACPI_RSC_LENGTH,\n\tACPI_RSC_MOVE_GPIO_PIN,\n\tACPI_RSC_MOVE_GPIO_RES,\n\tACPI_RSC_MOVE_SERIAL_RES,\n\tACPI_RSC_MOVE_SERIAL_VEN,\n\tACPI_RSC_MOVE8,\n\tACPI_RSC_MOVE16,\n\tACPI_RSC_MOVE32,\n\tACPI_RSC_MOVE64,\n\tACPI_RSC_SET8,\n\tACPI_RSC_SOURCE,\n\tACPI_RSC_SOURCEX\n} ACPI_RSCONVERT_OPCODES;\n\n/* Resource Conversion sub-opcodes */\n\n#define ACPI_RSC_COMPARE_AML_LENGTH     0\n#define ACPI_RSC_COMPARE_VALUE          1\n\n#define ACPI_RSC_TABLE_SIZE(d)          (sizeof (d) / sizeof (struct acpi_rsconvert_info))\n\n#define ACPI_RS_OFFSET(f)               (u8) ACPI_OFFSET (struct acpi_resource,f)\n#define AML_OFFSET(f)                   (u8) ACPI_OFFSET (union aml_resource,f)\n\n/*\n * Individual entry for the resource dump tables\n */\ntypedef const struct acpi_rsdump_info {\n\tu8 opcode;\n\tu8 offset;\n\tchar *name;\n\tconst char **pointer;\n\n} acpi_rsdump_info;\n\n/* Values for the Opcode field above */\n\ntypedef enum {\n\tACPI_RSD_TITLE = 0,\n\tACPI_RSD_1BITFLAG,\n\tACPI_RSD_2BITFLAG,\n\tACPI_RSD_3BITFLAG,\n\tACPI_RSD_ADDRESS,\n\tACPI_RSD_DWORDLIST,\n\tACPI_RSD_LITERAL,\n\tACPI_RSD_LONGLIST,\n\tACPI_RSD_SHORTLIST,\n\tACPI_RSD_SHORTLISTX,\n\tACPI_RSD_SOURCE,\n\tACPI_RSD_STRING,\n\tACPI_RSD_UINT8,\n\tACPI_RSD_UINT16,\n\tACPI_RSD_UINT32,\n\tACPI_RSD_UINT64,\n\tACPI_RSD_WORDLIST\n} ACPI_RSDUMP_OPCODES;\n\n/* restore default alignment */\n\n#pragma pack()\n\n/* Resource tables indexed by internal resource type */\n\nextern const u8 acpi_gbl_aml_resource_sizes[];\nextern const u8 acpi_gbl_aml_resource_serial_bus_sizes[];\nextern struct acpi_rsconvert_info *acpi_gbl_set_resource_dispatch[];\n\n/* Resource tables indexed by raw AML resource descriptor type */\n\nextern const u8 acpi_gbl_resource_struct_sizes[];\nextern const u8 acpi_gbl_resource_struct_serial_bus_sizes[];\nextern struct acpi_rsconvert_info *acpi_gbl_get_resource_dispatch[];\n\nextern struct acpi_rsconvert_info\n    *acpi_gbl_convert_resource_serial_bus_dispatch[];\n\nstruct acpi_vendor_walk_info {\n\tstruct acpi_vendor_uuid *uuid;\n\tstruct acpi_buffer *buffer;\n\tacpi_status status;\n};\n\n/*\n * rscreate\n */\nacpi_status\nacpi_rs_create_resource_list(union acpi_operand_object *aml_buffer,\n\t\t\t     struct acpi_buffer *output_buffer);\n\nacpi_status\nacpi_rs_create_aml_resources(struct acpi_buffer *resource_list,\n\t\t\t     struct acpi_buffer *output_buffer);\n\nacpi_status\nacpi_rs_create_pci_routing_table(union acpi_operand_object *package_object,\n\t\t\t\t struct acpi_buffer *output_buffer);\n\n/*\n * rsutils\n */\n\nacpi_status\nacpi_rs_get_prt_method_data(struct acpi_namespace_node *node,\n\t\t\t    struct acpi_buffer *ret_buffer);\n\nacpi_status\nacpi_rs_get_crs_method_data(struct acpi_namespace_node *node,\n\t\t\t    struct acpi_buffer *ret_buffer);\n\nacpi_status\nacpi_rs_get_prs_method_data(struct acpi_namespace_node *node,\n\t\t\t    struct acpi_buffer *ret_buffer);\n\nacpi_status\nacpi_rs_get_method_data(acpi_handle handle,\n\t\t\tchar *path, struct acpi_buffer *ret_buffer);\n\nacpi_status\nacpi_rs_set_srs_method_data(struct acpi_namespace_node *node,\n\t\t\t    struct acpi_buffer *ret_buffer);\n\nacpi_status\nacpi_rs_get_aei_method_data(struct acpi_namespace_node *node,\n\t\t\t    struct acpi_buffer *ret_buffer);\n\n/*\n * rscalc\n */\nacpi_status\nacpi_rs_get_list_length(u8 * aml_buffer,\n\t\t\tu32 aml_buffer_length, acpi_size * size_needed);\n\nacpi_status\nacpi_rs_get_aml_length(struct acpi_resource *resource_list,\n\t\t       acpi_size resource_list_size, acpi_size * size_needed);\n\nacpi_status\nacpi_rs_get_pci_routing_table_length(union acpi_operand_object *package_object,\n\t\t\t\t     acpi_size * buffer_size_needed);\n\nacpi_status\nacpi_rs_convert_aml_to_resources(u8 * aml,\n\t\t\t\t u32 length,\n\t\t\t\t u32 offset, u8 resource_index, void **context);\n\nacpi_status\nacpi_rs_convert_resources_to_aml(struct acpi_resource *resource,\n\t\t\t\t acpi_size aml_size_needed, u8 * output_buffer);\n\n/*\n * rsaddr\n */\nvoid\nacpi_rs_set_address_common(union aml_resource *aml,\n\t\t\t   struct acpi_resource *resource);\n\nu8\nacpi_rs_get_address_common(struct acpi_resource *resource,\n\t\t\t   union aml_resource *aml);\n\n/*\n * rsmisc\n */\nacpi_status\nacpi_rs_convert_aml_to_resource(struct acpi_resource *resource,\n\t\t\t\tunion aml_resource *aml,\n\t\t\t\tstruct acpi_rsconvert_info *info);\n\nacpi_status\nacpi_rs_convert_resource_to_aml(struct acpi_resource *resource,\n\t\t\t\tunion aml_resource *aml,\n\t\t\t\tstruct acpi_rsconvert_info *info);\n\n/*\n * rsutils\n */\nvoid\nacpi_rs_move_data(void *destination,\n\t\t  void *source, u16 item_count, u8 move_type);\n\nu8 acpi_rs_decode_bitmask(u16 mask, u8 * list);\n\nu16 acpi_rs_encode_bitmask(u8 * list, u8 count);\n\nacpi_rs_length\nacpi_rs_get_resource_source(acpi_rs_length resource_length,\n\t\t\t    acpi_rs_length minimum_length,\n\t\t\t    struct acpi_resource_source *resource_source,\n\t\t\t    union aml_resource *aml, char *string_ptr);\n\nacpi_rsdesc_size\nacpi_rs_set_resource_source(union aml_resource *aml,\n\t\t\t    acpi_rs_length minimum_length,\n\t\t\t    struct acpi_resource_source *resource_source);\n\nvoid\nacpi_rs_set_resource_header(u8 descriptor_type,\n\t\t\t    acpi_rsdesc_size total_length,\n\t\t\t    union aml_resource *aml);\n\nvoid\nacpi_rs_set_resource_length(acpi_rsdesc_size total_length,\n\t\t\t    union aml_resource *aml);\n\n/*\n * rsdump - Debugger support\n */\n#ifdef ACPI_DEBUGGER\nvoid acpi_rs_dump_resource_list(struct acpi_resource *resource);\n\nvoid acpi_rs_dump_irq_list(u8 *route_table);\n#endif\n\n/*\n * Resource conversion tables\n */\nextern struct acpi_rsconvert_info acpi_rs_convert_dma[];\nextern struct acpi_rsconvert_info acpi_rs_convert_end_dpf[];\nextern struct acpi_rsconvert_info acpi_rs_convert_io[];\nextern struct acpi_rsconvert_info acpi_rs_convert_fixed_io[];\nextern struct acpi_rsconvert_info acpi_rs_convert_end_tag[];\nextern struct acpi_rsconvert_info acpi_rs_convert_memory24[];\nextern struct acpi_rsconvert_info acpi_rs_convert_generic_reg[];\nextern struct acpi_rsconvert_info acpi_rs_convert_memory32[];\nextern struct acpi_rsconvert_info acpi_rs_convert_fixed_memory32[];\nextern struct acpi_rsconvert_info acpi_rs_convert_address32[];\nextern struct acpi_rsconvert_info acpi_rs_convert_address16[];\nextern struct acpi_rsconvert_info acpi_rs_convert_ext_irq[];\nextern struct acpi_rsconvert_info acpi_rs_convert_address64[];\nextern struct acpi_rsconvert_info acpi_rs_convert_ext_address64[];\nextern struct acpi_rsconvert_info acpi_rs_convert_gpio[];\nextern struct acpi_rsconvert_info acpi_rs_convert_fixed_dma[];\nextern struct acpi_rsconvert_info acpi_rs_convert_i2c_serial_bus[];\nextern struct acpi_rsconvert_info acpi_rs_convert_spi_serial_bus[];\nextern struct acpi_rsconvert_info acpi_rs_convert_uart_serial_bus[];\n\n/* These resources require separate get/set tables */\n\nextern struct acpi_rsconvert_info acpi_rs_get_irq[];\nextern struct acpi_rsconvert_info acpi_rs_get_start_dpf[];\nextern struct acpi_rsconvert_info acpi_rs_get_vendor_small[];\nextern struct acpi_rsconvert_info acpi_rs_get_vendor_large[];\n\nextern struct acpi_rsconvert_info acpi_rs_set_irq[];\nextern struct acpi_rsconvert_info acpi_rs_set_start_dpf[];\nextern struct acpi_rsconvert_info acpi_rs_set_vendor[];\n\n#if defined(ACPI_DEBUG_OUTPUT) || defined(ACPI_DEBUGGER)\n/*\n * rsinfo\n */\nextern struct acpi_rsdump_info *acpi_gbl_dump_resource_dispatch[];\nextern struct acpi_rsdump_info *acpi_gbl_dump_serial_bus_dispatch[];\n\n/*\n * rsdumpinfo\n */\nextern struct acpi_rsdump_info acpi_rs_dump_irq[];\nextern struct acpi_rsdump_info acpi_rs_dump_prt[];\nextern struct acpi_rsdump_info acpi_rs_dump_dma[];\nextern struct acpi_rsdump_info acpi_rs_dump_start_dpf[];\nextern struct acpi_rsdump_info acpi_rs_dump_end_dpf[];\nextern struct acpi_rsdump_info acpi_rs_dump_io[];\nextern struct acpi_rsdump_info acpi_rs_dump_io_flags[];\nextern struct acpi_rsdump_info acpi_rs_dump_fixed_io[];\nextern struct acpi_rsdump_info acpi_rs_dump_vendor[];\nextern struct acpi_rsdump_info acpi_rs_dump_end_tag[];\nextern struct acpi_rsdump_info acpi_rs_dump_memory24[];\nextern struct acpi_rsdump_info acpi_rs_dump_memory32[];\nextern struct acpi_rsdump_info acpi_rs_dump_memory_flags[];\nextern struct acpi_rsdump_info acpi_rs_dump_fixed_memory32[];\nextern struct acpi_rsdump_info acpi_rs_dump_address16[];\nextern struct acpi_rsdump_info acpi_rs_dump_address32[];\nextern struct acpi_rsdump_info acpi_rs_dump_address64[];\nextern struct acpi_rsdump_info acpi_rs_dump_ext_address64[];\nextern struct acpi_rsdump_info acpi_rs_dump_ext_irq[];\nextern struct acpi_rsdump_info acpi_rs_dump_generic_reg[];\nextern struct acpi_rsdump_info acpi_rs_dump_gpio[];\nextern struct acpi_rsdump_info acpi_rs_dump_fixed_dma[];\nextern struct acpi_rsdump_info acpi_rs_dump_common_serial_bus[];\nextern struct acpi_rsdump_info acpi_rs_dump_i2c_serial_bus[];\nextern struct acpi_rsdump_info acpi_rs_dump_spi_serial_bus[];\nextern struct acpi_rsdump_info acpi_rs_dump_uart_serial_bus[];\nextern struct acpi_rsdump_info acpi_rs_dump_general_flags[];\n#endif\n\n#endif\t\t\t\t/* __ACRESRC_H__ */\n",
            "binary": false,
            "copies": 768
        },
        {
            "id": "de5b91932bd022ab08ce6877d50226845098e5bd",
            "size": 21795,
            "content": null,
            "binary": true,
            "copies": 1
        },
        {
            "id": "36883418f66e51f46fadb68a51b57c93378fa46e",
            "size": 5262,
            "content": null,
            "binary": true,
            "copies": 1
        }
    ]
}