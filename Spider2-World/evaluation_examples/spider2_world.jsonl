{"instance_id": "06e7f50f-373c-4351-b795-86c7044fce9a", "instruction": "Can you find the top 5 most frequently imported Python modules and R libraries from the GitHub sample files and list them along with their occurrence counts? Please sort the results by language and then by the number of occurrences in descending order.", "type": "Bigquery", "derived_from": "bq180_1", "plan": "1. **Extract File Information:**\r\n   - Join `sample_files` and `sample_contents` tables on `id` to get `file_id`, `repo_name`, `path`, and `content`.\r\n   - Split `content` into individual lines, treating each line as a separate record.\r\n\r\n2. **Identify and Extract Module Imports:**\r\n   - Create a CTE (`extracted_modules`) to filter and process lines containing import statements for Python (`import` or `from`) and R (`library`).\r\n   - For Python files (`.py`):\r\n     - Extract modules imported using `import` and `from` statements.\r\n     - Use `REGEXP_EXTRACT_ALL` to extract module names and concatenate results.\r\n   - For R files (`.r`):\r\n     - Extract modules imported using `library()` statements.\r\n     - Use `REGEXP_EXTRACT_ALL` to extract module names.\r\n   - Store extracted modules along with file information and detected language (Python or R).\r\n\r\n3. **Count Module Occurrences:**\r\n   - Create another CTE (`module_counts`) to count occurrences of each module per language.\r\n   - Unnest the modules array to have one module per row.\r\n   - Group by `language` and `module` and count occurrences.\r\n\r\n4. **Select Top 5 Modules for Python:**\r\n   - Create a CTE (`top5_python`) to select the top 5 most frequently used Python modules.\r\n   - Filter `module_counts` for `python` language.\r\n   - Order by `occurrence_count` in descending order.\r\n   - Limit results to 5.\r\n\r\n5. **Select Top 5 Modules for R:**\r\n   - Create a CTE (`top5_r`) to select the top 5 most frequently used R modules.\r\n   - Filter `module_counts` for `r` language.\r\n   - Order by `occurrence_count` in descending order.\r\n   - Limit results to 5.\r\n\r\n6. **Combine Results and Order:**\r\n   - Use `UNION ALL` to combine results from `top5_python` and `top5_r`.\r\n   - Order the final results by `language` and `occurrence_count` in descending order to display the top modules for each language."}
{"instance_id": "0bcfa8c4-bc4c-4cd8-9fe5-dd60a2c1f956", "instruction": "I want to know the preferences of customers who purchased the Google Navy Speckled Tee in December 2020. What other product was purchased with the highest total quantity alongside this item?", "type": "Bigquery", "derived_from": "ga001", "plan": "1. Focus on the item named \"Google Navy Speckled Tee.\"\n2. Select all purchase-type events from December 2020.\n3. Extract the IDs of individuals who purchased the \"Google Navy Speckled Tee\" during these events.\n4. Calculate all items purchased by these IDs and retain the top 10 items by purchase volume."}
{"instance_id": "1d009ac3-1c75-447b-a7e0-49ccc2b5fbf9", "instruction": "I'm trying to evaluate which board types were most effective on September 15, 2018. Can you find out the average scores for each board type from the quick play level completions on that day?.", "type": "Bigquery", "derived_from": "ga003", "plan": "1. Extract all data for the \"level_complete_quickplay\" mode.\n2. Focus on the board type, grouping by user ID and event timestamp to summarize board type and corresponding scores.\n3. Calculate the average score for each board type."}
{"instance_id": "27c1aab9-ed94-47ea-ba3a-1dbfcd4856a2", "instruction": "In which year did the assignee with the most applications in the patent category 'A61K39' file the most?", "type": "Bigquery", "derived_from": "bq026_1", "plan": "1. First, access the patents database to retrieve all patent application data where the CPC code matches \"A61K39\".\n2. For each assignee, categorize the data by year and country of application.\n3. Identify the assignee with the most total applications for the \u201cA61K39\u201d patent.\n4. Select the year with the most applications for this assignee"}
{"instance_id": "335fb285-c9fd-45ff-ba8d-fe89a62016f7", "instruction": "What is the average time in minutes that users spend per visit on the product category with the highest total quantity purchased?", "type": "Bigquery", "derived_from": "bq188", "plan": "1. **Create an Initial Dataset:**\n   - Extract event details including timestamps and session information.\n   - Identify events related to a specific type by transforming a specific URI component into an identifier.\n   - Calculate the timestamp for the next event in the same session.\n\n2. **Aggregate Purchase Data:**\n   - Determine the total number of times products in various categories have been purchased.\n   - Group this data by category.\n\n3. **Calculate Visit Statistics:**\n   - Compute visit details for each category by joining the initial dataset with product data.\n   - Count the number of visits for each category.\n   - Calculate the average time spent per visit by determining the time difference between consecutive events and converting it to minutes.\n   - Include the total quantity of purchases for each category from the aggregated purchase data.\n   - Filter out irrelevant events to ensure only meaningful data is included.\n\n4. **Determine the Desired Metric:**\n   - Select the average time spent per visit for the category with the highest total quantity purchased.\n   - Sort the results based on the total quantity purchased in descending order.\n   - Limit the results to get the top category.\n\n5. **Output the Result:**\n   - Convert the average time spent per visit to a string format for the final output."}
{"instance_id": "4728031f-3be4-4606-922f-e4a5b0017a91", "instruction": "I wonder how many days between the first transaction and the first visit for each transacting visitor in Feburary 2017, along with the device used in the transaction. You could take a look at google_analytics_sample.ga_sessions.md as a reference.", "type": "Bigquery", "derived_from": "bq001", "plan": "1. Firstly, extract the first visit date for each visitor in the specified range `201702`.\n2. Next, extract the first transaction date for each visitor in Feb 2017.\n3. Then, extract the device categories used for transactions.\n4. Combine the visit, transaction and device data.\n5. Calculate the number of days between the first transaction and the first visit date for each visitor using `DATE_DIFF`."}
{"instance_id": "478fa226-daac-4bc0-8d18-35c1e19fb5cf", "instruction": "Compare the average pageviews per visitor between purchase and non-purchase sessions for each month from April to July in 2017. You could take a look at google_analytics_sample.ga_sessions.md as a reference.", "type": "Bigquery", "derived_from": "bq003", "plan": "1. Calculate average pageviews for non-purchase sessions:\n- Extracts the year and month from the `date` field.\n- Filters sessions with no transactions and no product revenue.\n- Aggregates data by month and calculates the average pageviews per visitor.\n2. Similarly, calculate average pageviews for purchase sessions. The difference is that we only include sessions with at least one transaction and product revenue.\n3. Combine and compare the results, that is select and order results by month."}
{"instance_id": "47ac6231-35f7-4dd4-ae33-5f6bd05ad4e0", "instruction": "For the 'B2' publication granted in January 2017 in the US that received the most forward citations within a month of its filing date, determine the publication number of the most similar patent from the same filing year.", "type": "Bigquery", "derived_from": "bq214", "plan": "1.Extract Relevant Patent Data: Access the patents database to retrieve information for patents granted in the US on June 2nd, 2015, with the kind code B2, indicating they are granted utility patents.\n2.Determine the IPC Codes: For each patent, extract and count occurrences of four-digit IPC codes from the abstracts, identifying how frequently each IPC code appears within a given patent.\n3.Identify Backward Citations: For each selected patent, retrieve backward citations (i.e., earlier patents cited by the patent in question) and join these with the IPC data to analyze the diversity of IPC codes from these citations.\n4.Calculate Originality Score: Compute an originality score for each patent based on the diversity of IPC codes cited. This involves calculating a formula where the diversity is inversely related to the sum of the squares of IPC code occurrences.\n5.Select the Patent with the Highest Originality: From the calculated originality scores, identify the patent with the highest score, which indicates it has the broadest range of influences from prior art, suggesting a high level of innovation.\n6.Output the Result: Return the publication number of the patent with the highest originality score, highlighting it as the most original patent granted on that specific day."}
{"instance_id": "4a0c3053-46ac-450e-971f-4684cdf861cd", "instruction": "What is the most prescribed medication in each state in 2014?", "type": "Bigquery", "derived_from": "bq019_1", "plan": "1. Decide which table to work on:  `bigquery-public-data.cms_medicare.part_d_prescriber_2014`\n2. Group the data by drug name and state, and calculate the total claim count for each drug in each state.\n3. For each state, find out the max claim count number among different drugs. (most prescribed)\n4. List out corresponding most prescribed drug name for each state. (don\u2018t need to be in order"}
{"instance_id": "54e2ea3a-0439-4f96-a88e-982a41807eff", "instruction": "For the assignee who has been the most active in the patent category 'A61K39', I'd like to know the five patent jurisdictions code where they filed the most patents during their busiest year, separated by commas.", "type": "Bigquery", "derived_from": "bq026", "plan": "1. First, access the patents database to retrieve all patent application data where the CPC code matches \"A61K39\".\n2. For each assignee, categorize the data by year and country of application.\n3. Identify the top five countries with the most applications for each assignee per year.\n4. Sort to find out which assignee has the highest total number of applications.\n5. Select the year with the most applications for this assignee."}
{"instance_id": "5d16f91a-01fa-46b2-9f08-7207cf3e0e81", "instruction": "Identify the CPC technology areas with the highest exponential moving average of patent filings each year (smoothing factor 0.2), and provide the full title and the best year for each CPC group at level 5.", "type": "Bigquery", "derived_from": "bq221", "plan": "1. First, we define a temporary JavaScript function, which is used to calculate the year with the highest moving average of patent counts.\n2. Use common table expression to extract the CPC codes and filing years for patents, ensuring each patent has an application number and valid filing date. Also filter to include only the primary CPC code (`first = TRUE`).\n3. Calculate the most common patenting technology areas by year and identify the year with the highest moving average of patents for each CPC group. Concretely,\n- Aggregate patent counts by CPC group and filing year.\n- Use the defined function in Step 1. to find the year with the highest moving average of patents for each CPC group.\n- Join the results with the CPC definition table to get the full title for each CPC group. Remember, only include level 5 CPC groups."}
{"instance_id": "69846f18-c7c6-4719-9317-c652f7d7d064", "instruction": "Can you figure out the average difference in pageviews between users who bought something and those who didnt in December 2020? Just label anyone who was involved in purchase events as a purchaser", "type": "Bigquery", "derived_from": "ga004", "plan": "1. Segment user activities into page views and purchase events for December 2020.\n2. Classify users based on whether they made any purchases.\n3. Calculate average page views for purchasers and non-purchasers.\n4. Determine the difference in average page views between these two groups."}
{"instance_id": "6e420b07-316c-489a-9e41-61281de78a29", "instruction": "Which assignee and primary CPC subclass full title most frequently cite patents assigned to 'AAAA'?", "type": "Bigquery", "derived_from": "bq223", "plan": "1. Firstly, extract citing publication and cited publication details, including only the primary CPC code.\n2. Combine the citing and cited data according the publication number.\n3. Join with CPC definition information to extract CPC subclass title.\n4. Add filter to include only relevant citations.\n5. Group the results by citing assignee and CPC full title, count the citations and order the result by count.\nWe only return the most frequent assignee and CPC subclass title."}
{"instance_id": "6f345f12-e034-4a9d-b456-93e5b585075e", "instruction": "Please help me compute the T score to show the statistical difference in the expression of the DRG2 gene between LGG patients with and without TP53 mutation. You could refer to the markdown file for the formula.", "type": "Bigquery", "derived_from": "bq157", "plan": ""}
{"instance_id": "73d1af34-d03e-455a-9111-148192548574", "instruction": "For patent class A01B3, I want to analyze the information of the top 20 assignees based on the total number of applications. Please provide the following five pieces of information: the names of these assignees, their total number of applications, the year with the most applications, the number of applications in that year, and the country code with the most applications during that year.", "type": "Bigquery", "derived_from": "bq026_2", "plan": "1. **Filter Patent Data**: \n   - Identify and collect patent applications related to a specific patent class.\n   - Ensure each application is uniquely identified and includes relevant assignee, filing date, and country information.\n\n2. **Count Applications by Assignee, Year, and Country**:\n   - For each application, determine the number of filings per assignee, broken down by year and country.\n   - Group the data by assignee name, year, and country to prepare for aggregation.\n\n3. **Aggregate Yearly Application Data**:\n   - Summarize the total number of applications for each assignee by year.\n   - Identify the country with the highest number of applications for each assignee and year.\n\n4. **Determine Peak Application Year for Each Assignee**:\n   - Calculate the overall number of applications for each assignee.\n   - Identify the year with the highest application count and the corresponding country with the most applications for each assignee.\n\n5. **Select and Rank Top Assignees**:\n   - Order the assignees by their total number of applications in descending order.\n   - Limit the results to the top 20 assignees, including their total application count, the year with the highest applications, the number of applications in that year, and the most frequent country code during that year."}
{"instance_id": "9457e049-fbe5-430c-a839-0327c7438bb9", "instruction": "Can you help me figure out the revenue for the product category that has the highest number of customers making a purchase in their first order?", "type": "Bigquery", "derived_from": "bq014", "plan": "1. Get the first order of each user, excluding the cancelled and returned orders. (from 'orders' table)\n2. Calculate the total revenue and distinct user count for each product category. (combine the 'orders' 'order_items' and 'products' tables)\n3. Select the top category with the most user count.\n4. Based on the top category, get its revenue."}
{"instance_id": "949e0490-4c4c-47b6-bd0a-1f2ba01d09b5", "instruction": "What is the publication number of US patent granted at January 2018, with the highest originality score based on the diversity of 4-digits IPC codes from its backward citations?", "type": "Bigquery", "derived_from": "bq215", "plan": "1. **Filter US Patents:**\n   - Select publication numbers and application numbers from the dataset.\n   - Only include records where the country code is 'US'.\n   - Ensure the grant date is within January 2018.\n   - Exclude records with a grant date of 0.\n   - Only consider patents with a specific kind code pattern.\n\n2. **Extract IPC Codes:**\n   - For each selected patent, extract and count the unique 4-digit IPC codes from the associated IPC codes.\n\n3. **Identify Maximum IPC Code Count:**\n   - Create a subset of records that have the maximum count of a specific 4-digit IPC code for each patent.\n\n4. **Calculate IPC Occurrences in Backward Citations:**\n   - Join the filtered patents with their backward citations.\n   - For each backward citation, join with the subset of records to get the 4-digit IPC codes.\n   - Count the occurrences of each 4-digit IPC code in the backward citations for each patent.\n\n5. **Compute Originality Score:**\n   - For each patent, calculate an originality score based on the diversity of the 4-digit IPC codes from the backward citations.\n   - Use a formula that considers the sum of squared occurrences of each IPC code, normalized by the total number of occurrences.\n\n6. **Select Highest Originality Score:**\n   - From the computed originality scores, select the patent with the highest score.\n\n7. **Return Result:**\n   - Output the publication number of the patent with the highest originality score."}
{"instance_id": "9863d716-0af4-422a-9bfd-65ff5684eca1", "instruction": "Can you give me the average page views per buyer and total page views for each day in November 2020?", "type": "Bigquery", "derived_from": "ga004_1", "plan": "1. **Define a Temporary Data Set:**\n   - Create a temporary data set to collect user activity information.\n   - Parse the date format to a standard date type.\n   - Count the occurrences of 'page_view' events for each user per day.\n   - Count the occurrences of 'purchase' related events for each user per day.\n   - Filter the data for the specified date range (November 2020).\n\n2. **Aggregate User Activity:**\n   - From the temporary data set, select the date, the sum of 'page_view' counts, and the average 'page_view' counts per user who made a purchase.\n   - Ensure to include only users who have made at least one purchase-related event.\n\n3. **Compute Metrics:**\n   - For each day in November 2020:\n     - Calculate the average number of 'page_view' events per purchasing user.\n     - Calculate the total number of 'page_view' events.\n\n4. **Group and Order Results:**\n   - Group the results by date to get daily metrics.\n   - Order the results by date to maintain chronological order."}
{"instance_id": "9adb6e30-40b9-4fe3-b254-b54bd0448f44", "instruction": "Get the number of patent publications and the average number of inventors per patent in the US every five years from 1945 to 2020?", "type": "Bigquery", "derived_from": "bq029", "plan": "1.Extract information on patent applications in the United States since 1945.\n2.Divide the data into five-year intervals.\n3.Within each interval, count the number of applicants for each patent, ensuring each patent has more than zero applicants.\n4.Calculate both the total number of patents and the average number of applicants per patent for each interval."}
{"instance_id": "9cecf6c2-c633-418c-a627-fbf31d4043a8", "instruction": "How many pseudo users were active in the last 7 days but inactive in the last 2 days as of January 7, 2021?", "type": "Bigquery", "derived_from": "bq011", "plan": "1. Identify pseudo users (`user_pseudo_id`) active in the last 7 days: query the `events_*` tables to find users who were active in the last 7 days based on engagement time and filter them by the fixed timestamp and relevant table suffixes (from `20210101` to `20210107`).\n2. Identify pseudo users (`user_pseudo_id`) active in the last 2 days: query the `events_*` tables to find users who were active in the last 2 days based on engagement time and filter them by the fixed timestamp and relevant table suffixes (from `20210105` to `20210107`).\n3. Combine results and filter:\n- Use a `LEFT JOIN` to combine the two sets of users and filter out users who were active in the last 2 days.\n- Count the distinct user IDs who meet the criteria of being active in the last 7 days but not in the last 2 days."}
{"instance_id": "b544e853-00b3-45bc-b3ea-81f195739c60", "instruction": "Please find out what percentage of the page views on January 2, 2021, were for PDP type pages.", "type": "Bigquery", "derived_from": "ga007", "plan": "1. query the event data to retrieve all unique event names\n2. Selects events data from the Google Analytics 4 (GA4) sample e-commerce dataset for the specific date (20210102)\n3. Filter to include only events named 'page_view', which represent page views.\n4. flatten the nested event_params array and extract values for ga_session_id, ga_session_number, page_title, and page_location. This allows the analysis of individual page views within each user's session.\n5. Further processes the unnested event data to classify pages based on URL depth and specific keywords into either Product Detail Pages (PDP) or Product Listing Pages (PLP).\n6. Calculate the total proportion of PDP"}
{"instance_id": "caae42a9-0d24-4dfb-bcf0-e5274b51af30", "instruction": "Please help me retrieve the top 3 most frequently used module names from Python and R scripts.", "type": "Bigquery", "derived_from": "bq180", "plan": "1. Get all the sample github file data and unnest the lines. Record the file path for each line.\n2. Extract the module names from the \"import\" and \"from\" statements of Python files, and the \"library(...)\" lines of R files.\n3. Count the number of occurences for each module and limit to the top 10 most used ones."}
{"instance_id": "cf46d8be-fa20-47a7-a2ac-d0263cb67924", "instruction": "For the most common inpatient diagnosis in the US in 2014, what was the citywise average payment respectively in the three cities that had the most cases?", "type": "Bigquery", "derived_from": "bq019", "plan": "1. Decide which table to work on:  `bigquery-public-data.cms_medicare.inpatient_charges_2014`\n2. Rank all the diagnostic conditions by national number of cases to find the most common diagnostic condition.\n3. Group the data by diagnostic condition name, city and state, and calculate the citywise number of cases, citywise average payment for each entry.\n4. Accordingly, rank the cities by citywise number of cases for the most common diagnostic condition, and calculate the national avg. payments.\n5. Limit to the top 3 cities."}
{"instance_id": "d30b2fcf-037c-4e90-9471-9d4a0a9f5e7b", "instruction": "Identify the top five patents filed in the same year as `US-9023721-B2` that are most similar to it based on technological similarities. Please provide the publication numbers.", "type": "Bigquery", "derived_from": "bq214_1", "plan": "1. **Extract the Target Patent**: Create a subset containing only the target patent's unique identifiers.\n\n2. **Calculate Filing Year for Target Patent**: Determine the filing year of the target patent by extracting the year from its filing date.\n\n3. **Identify Same-Year Patents**: Retrieve all patents filed in the same year as the target patent, excluding the target patent itself.\n\n4. **Calculate Technological Similarity**: For each patent from the same year, compute the technological similarity with the target patent using a predefined similarity metric based on their respective embeddings.\n\n5. **Rank Similar Patents**: Order the patents by their similarity scores in descending order.\n\n6. **Select Top Similar Patents**: From the ordered list, select the top five patents with the highest similarity scores for each target patent.\n\n7. **Output Similar Patents**: Return the publication numbers and similarity scores of the top five most similar patents."}
{"instance_id": "d745d6e3-beb9-44cc-a8db-646c2ce510f4", "instruction": "Can you tell me which healthcare provider incurs the highest combined average costs for both outpatient and inpatient services in 2014?", "type": "Bigquery", "derived_from": "bq019_2", "plan": "1. find out the corresponding table as described in the instruction `bigquery-public-data.cms_medicare.outpatient_charges_2014` and `bigquery-public-data.cms_medicare.inpatient_charges_2014`\r\n2. Group the outpatient charges data by different medical provider, and calculate the average outpatient cost per service.\r\n3. Do the same to inpatient charges data.\r\n4. Combine them to calculate the sum of two average costs for each medical provider.\r\n5. Rank them to find the peak. (the highest one)"}
{"instance_id": "e1c62309-43cd-4d1c-be22-3d4c5fd8a242", "instruction": "What's the top 3 widely used languages according to file counts? Please refer to the lang_and_text.md file for more information.", "type": "Bigquery", "derived_from": "bq225", "plan": "1. Extract languages for each file according to file extensions.\n    - Determine the programming language based on the file extension extracted from the `path` field of the `files` table.\n    - Use the `REGEXP_EXTRACT` function to extract the file extension.\n    - Use a `CASE` statement to map file extensions to their respective languages based on the provided document `lang_and_ext.md`.\n2. Perform an inner join between the `languages` CTE and the `sample_contents` table on the `id` column. This join ensures that only files which have a corresponding content entry are considered.\n3. Filter out rows where `language` or `content` is `NULL`. This ensures that only valid and meaningful entries are included in the final result.\n4. Group and count by languages, and limit the final results to the top 3 entries."}
{"instance_id": "e4a35097-4ff3-4ca7-8304-f593e039735b", "instruction": "I want to know the preferences of customers who purchased the Google Navy Speckled Tee in December 2020. What other product was most frequently purchased alongside this item?", "type": "Bigquery", "derived_from": "ga001", "plan": "1. Focus on the item named \"Google Navy Speckled Tee.\"\n2. Select all purchase-type events from December 2020.\n3. Extract the IDs of individuals who purchased the \"Google Navy Speckled Tee\" during these events.\n4. Calculate all items purchased by these IDs and retain the top 10 items by purchase volume."}
{"instance_id": "edb7b33b-2579-49c0-a43a-ffde9a3e1517", "instruction": "Which traffic source receives the top revenue in 2017 and what is the difference (millions, rounded to two decimal places) between its highest and lowest revenue months?", "type": "Bigquery", "derived_from": "bq009", "plan": "1. Calculate monthly revenue for each traffic source.\n2. Aggregate the monthly revenues to compute the total yearly revenue for each traffic source.\n3. Determine which traffic source has the highest total revenue for the year 2017.\n4. Retrieve the monthly revenue data for the top traffic source identified in the previous step.\n5. Calculate the difference between the highest and lowest monthly revenues for the top traffic source.\n6. Retrieve the traffic source and the revenue difference."}
{"instance_id": "f9f50a48-022c-47fa-b02f-a79f96c0a59c", "instruction": "What is the heterogeneity score (H-score) among groups of LGG patients, based on the correlation between IGF2 gene expression and ICD-O-3 histology codes? Please refer to the documentation for the formula.", "type": "Bigquery", "derived_from": "bq154", "plan": ""}
{"instance_id": "fd046fdc-9d5c-4e3c-9d70-afa047dd2a59", "instruction": "What's the maximum monthly, weekly, and daily product revenues (in millions) generated by the top-performing traffic source in the first half of 2017? You could take a look at google_analytics_sample.ga_sessions.md as a reference.", "type": "Bigquery", "derived_from": "bq002", "plan": "1. Firstly, we define the date range to be the first half of year 2017: 20170101 to 20170630.\n2. Next, calculate daily revenues for each traffic source.\n3. Similarly, calculate weekly and monthly revenues for each traffic source.\n4. Determine the top-performing traffic source through aggregation and sorting.\n5. Calculate the maximum revenues for this traffic source on daily/weekly/monthly basis respectively.\n6. Return the final results."}
{"instance_id": "8604257c-7a9d-4cc0-9fc0-c6408dc1e5a3", "instruction": "Could you help me find the actor who appeared most in English G or PG-rated children's movies no longer than 2 hours, released between 2000 and 2010? Give me a full name.", "type": "Local", "derived_from": "local038", "plan": ""}
{"instance_id": "f624e71e-ad2c-4bdb-a85a-bdb465211087", "instruction": "What is the difference in average spending between customers who bought albums from the best-selling artist and those who bought from the least-selling artist?", "type": "Local", "derived_from": "local038", "plan": ""}
{"instance_id": "053d2650-2188-4e58-a141-2376d5cff0a5", "instruction": "Complete the project of this database to show the metrics of each traffic source, I believe every touchpoint in the conversion path is equally important, please choose the most suitable attribution method.", "type": "DBT", "derived_from": "dbt001_1", "plan": ""}
{"instance_id": "12444719-63fc-4b14-ad1d-6d9e286856ee", "instruction": "What is the number of users in the month with the highest number of downgrades in the subscription change category?", "type": "DBT", "derived_from": "dbt002_3", "plan": ""}
{"instance_id": "1c8c6d04-9999-4660-ad70-92fe951cbd96", "instruction": "Please complete this data transformation project to analyze the trends in user subscription changes.", "type": "DBT", "derived_from": "dbt002_2", "plan": ""}
{"instance_id": "43d5ad49-0f99-4b90-a6df-d3afc5c216ff", "instruction": "How many customers have experienced a reactivation status", "type": "DBT", "derived_from": "dbt002_4", "plan": ""}
{"instance_id": "51e48d81-13d7-49ae-b0d4-ef8a04dfe78a", "instruction": "When using first touch attribution, how much more is the return on advertising spend (ROAS) for Facebook Ads compared to AdWords?", "type": "DBT", "derived_from": "dbt001_4", "plan": ""}
{"instance_id": "8fa59610-dc3f-49a7-af84-3e85b8cd581a", "instruction": "Complete the project on this database to calculate the monthly recurring revenue.", "type": "DBT", "derived_from": "dbt002_1", "plan": ""}
{"instance_id": "b6e64da5-6178-4ba3-96cd-17a83f0e9f88", "instruction": "Please assist me in completing the data transformation project of this database.", "type": "DBT", "derived_from": "dbt001_2", "plan": ""}
{"instance_id": "bc879f19-b4ef-469e-9be3-40aa0e9fa715", "instruction": "Which source has the highest total attribution revenue by last revenue? Please provide only the value.", "type": "DBT", "derived_from": "dbt001_3", "plan": ""}
