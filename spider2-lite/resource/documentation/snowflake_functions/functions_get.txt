  GET  ¶

Extracts a value from an [ ARRAY  ](../data-types-semistructured.html#label-
data-type-array) or an [ OBJECT  ](../data-types-semistructured.html#label-
data-type-object) (or a [ VARIANT  ](../data-types-semistructured.html#label-
data-type-variant) that contains an ARRAY or OBJECT).

The function returns NULL if either of the arguments is NULL.

Note that this function should not be confused with the [ GET  ](../sql/get)
DML command.

See also:

    

[ GET_IGNORE_CASE  ](get_ignore_case) , [ GET_PATH , :  ](get_path)

##  Syntax  ¶

**ARRAY (or VARIANT containing an ARRAY)**

    
    
    GET( <array> , <index> )
    
    GET( <variant> , <index> )
    

Copy

**OBJECT (or VARIANT containing an OBJECT)**

    
    
    GET( <object> , <field_name> )
    
    GET( <variant> , <field_name> )
    

Copy

**MAP**

    
    
    GET( <map> , <key> )
    

Copy

##  Arguments  ¶

` _ array  _ `

    

An expression that evaluates to an [ ARRAY  ](../data-types-
semistructured.html#label-data-type-array) .

` _ index  _ `

    

An expression that evaluates to an INTEGER. This specifies the position of the
element to retrieve from the ARRAY. The position is 0-based, not 1-based.

If the index points outside of the array boundaries, or if the indexed element
does not exist (in a sparse array):

  * If ` _ array  _ ` is a semi-structured ARRAY, this function returns NULL. 

  * If ` _ array  _ ` is a structured ARRAY, an error occurs. 

` _ variant  _ `

    

An expression that evaluates to a [ VARIANT  ](../data-types-
semistructured.html#label-data-type-variant) that contains either an ARRAY or
an OBJECT.

` _ object  _ `

    

An expression that evaluates to an [ OBJECT  ](../data-types-
semistructured.html#label-data-type-object) that contains key-value pairs.

` _ field_name  _ `

    

An expression that evaluates to a VARCHAR. This specifies the key in a key-
value pair for which you want to retrieve the value.

` _ field_name  _ ` must not be an empty string.

If ` _ object  _ ` is a [ structured OBJECT  ](../data-types-structured) , you
must specify a constant for ` _ field_name  _ ` .

If ` _ object  _ ` does not contain the specified key:

  * If ` _ object  _ ` is a semi-structured OBJECT, the function returns NULL. 

  * If ` _ object  _ ` is a structured OBJECT, an error occurs. 

` _ map  _ `

    

An expression that evaluates to a [ MAP  ](../data-types-structured) .

` _ key  _ `

    

The key in a key-value pair for which you want to retrieve the value.

If ` _ map  _ ` does not contain the specified key, the function returns NULL.

##  Returns  ¶

  * The returned value is the specified element of the ARRAY, or the value that corresponds to the specified key of a key-value pair in the OBJECT. 

  * If the input object is a semi-structured OBJECT, ARRAY, or VARIANT, the function returns a VARIANT. The data type is VARIANT because: 

    * In an ARRAY, each element is of type VARIANT. 

    * In an OBJECT, the value in each key-value pair is of type VARIANT. 

  * If the input object is a [ structured OBJECT, structured ARRAY, or MAP  ](../data-types-structured) , the function returns a value of the type specified for the object. 

For example, if the type of the input object is ARRAY(NUMBER), the function
returns a NUMBER.

##  Usage notes  ¶

  * GET applies case-sensitive matching to ` _ field_name  _ ` . For case-insensitive matching, use [ GET_IGNORE_CASE  ](get_ignore_case) . 

  * If the first parameter is of type VARIANT: 

    * If the second parameter is of type VARCHAR (e.g. a ` _ field_name  _ ` ), the function returns NULL if ` _ variant  _ ` does not contain an OBJECT. 

    * If the second parameter is of type INTEGER (e.g. an ` _ index  _ ` ), the function returns NULL if ` _ variant  _ ` does not contain an ARRAY. 

##  Examples  ¶

Create a table with sample data:

>
>     CREATE TABLE vartab (a ARRAY, o OBJECT, v VARIANT);
>     INSERT INTO vartab (a, o, v)
>       SELECT
>         ARRAY_CONSTRUCT(2.71, 3.14),
>         OBJECT_CONSTRUCT('Ukraine', 'Kyiv'::VARIANT,
>                          'France',  'Paris'::VARIANT),
>         TO_VARIANT(OBJECT_CONSTRUCT('weatherStationID', 42::VARIANT,
>                          'timestamp', '2022-03-07
> 14:00'::TIMESTAMP_LTZ::VARIANT,
>                          'temperature', 31.5::VARIANT,
>                          'sensorType', 'indoor'::VARIANT))
>         ;
>  
>
> Copy
>  
>  
>     SELECT a, o, v FROM vartab;
>
> +---------+----------------------+-------------------------------------------------+
>     | A       | O                    | V
> |
>
> |---------+----------------------+-------------------------------------------------|
>     | [       | {                    | {
> |
>     |   2.71, |   "France": "Paris", |   "sensorType": "indoor",
> |
>     |   3.14  |   "Ukraine": "Kyiv"  |   "temperature": 31.5,
> |
>     | ]       | }                    |   "timestamp": "2022-03-07
> 14:00:00.000 -0800", |
>     |         |                      |   "weatherStationID": 42
> |
>     |         |                      | }
> |
>
> +---------+----------------------+-------------------------------------------------+
>  
>
> Copy

Extract the first element of an ARRAY:

>
>     SELECT GET(a, 0) FROM vartab;
>     +-----------+
>     | GET(A, 0) |
>     |-----------|
>     | 2.71      |
>     +-----------+
>  
>
> Copy

Given the name of a country, extract the name of the capital city of that
country from an OBJECT containing country names and capital cities:

>
>     SELECT GET(o, 'Ukraine') FROM vartab;
>     +-------------------+
>     | GET(O, 'UKRAINE') |
>     |-------------------|
>     | "Kyiv"            |
>     +-------------------+
>  
>
> Copy

Extract the temperature from a VARIANT that contains an OBJECT:

>
>     SELECT GET(v, 'temperature') FROM vartab;
>     +-----------------------+
>     | GET(V, 'TEMPERATURE') |
>     |-----------------------|
>     | 31.5                  |
>     +-----------------------+
>  
>
> Copy

For more detailed examples, see [ Querying Semi-structured Data  ](../../user-
guide/querying-semistructured) .

For examples of using GET with XMLGET, see the Examples and Usage Notes
sections in [ XMLGET  ](xmlget) .

