  ROUND  ¶

Returns rounded values for ` _ input_expr  _ ` .

See also:

    

[ CEIL  ](ceil) , [ FLOOR  ](floor) , [ TRUNCATE , TRUNC  ](trunc)

##  Syntax  ¶

    
    
    ROUND( <input_expr> [ , <scale_expr> [ , <rounding_mode> ] ] )
    

Copy

    
    
    ROUND( EXPR => <input_expr> ,
           SCALE => <scale_expr>
           [ , ROUNDING_MODE => <rounding_mode>  ] )
    

Copy

##  Arguments  ¶

**Required:**

` _ input_expr  _ ` .  OR  .  ` EXPR  => _ input_expr  _ `

    

The value or expression to operate on. The data type should be one of the
numeric data types, such as FLOAT or NUMBER.

If you specify the ` EXPR  => ` named argument, you must also specify the `
SCALE  => ` named argument.

**Optional:**

` _ scale_expr  _ ` .  OR  .  ` SCALE  => _ scale_expr  _ `

    

The number of digits the output should include after the decimal point. The
expression should evaluate to an integer from -38 to +38.

The default ` _ scale_expr  _ ` is zero, meaning that the function removes all
digits after the decimal point.

For information about negative numbers, see the Usage Notes below.

If you specify the ` SCALE  => ` named argument, you must specify ` EXPR  => `
as the preceding named argument.

` _ rounding_mode  _ ` .  OR  .  ` ROUNDING_MODE  => _ rounding_mode  _ `

    

The rounding mode to use. You can specify one of the following values:

  * ` 'HALF_AWAY_FROM_ZERO'  ` . This mode rounds the value [ half away from zero ](https://en.wikipedia.org/wiki/Rounding#Rounding_half_away_from_zero) . 

  * ` 'HALF_TO_EVEN'  ` . This mode rounds the value [ half to even ](https://en.wikipedia.org/wiki/Rounding#Rounding_half_to_even) . 

Default: ` 'HALF_AWAY_FROM_ZERO'  `

If you specify the ` ROUNDING_MODE  => ` named argument, you must specify both
` EXPR  => ` and ` SCALE  => ` as preceding named arguments.

Note

If you specify either value for the ` _ rounding_mode  _ ` argument, the data
type of ` _ input_expr  _ ` must be [ one of the data types for a fixed-point
number  ](../data-types-numeric.html#label-data-types-for-fixed-point-numbers)
.

[ Data types for floating point numbers  ](../data-types-numeric.html#label-
data-types-for-floating-point-numbers) (e.g. FLOAT) are not supported with
this argument.

##  Returns  ¶

The return type is based on the input type:

  * If the input expression is a FLOAT, the returned type is a FLOAT. 

  * If the input expression is a NUMBER, the returned type is a NUMBER. 

    * If the input scale is constant: 

      * If the input scale is positive, the returned type has a scale equal to the input scale and has a precision large enough to encompass any possible result. 

      * If the input scale is negative, the returned type has a scale of 0. 

    * If the input scale is not constant, the returned type’s scale is the same as the input expression’s. 

If the scale is zero, then the value is effectively an INTEGER.

For example:

  * The data type returned by ROUND(3.14::FLOAT, 1) is FLOAT. 

  * The NUMBER returned by ROUND(3.14, 1) has scale 1 and precision at least 3. 

  * The NUMBER returned by ROUND(-9.99, 0) has scale 0 and precision at least 2. 

  * The NUMBER returned by ROUND(33.33, -1) has scale 0 and precision at least 3. 

##  Usage notes  ¶

  * You must either specify all arguments by name or by position. You cannot specify some of the arguments by name and other arguments by position. 

When specifying an argument by name, you cannot use double quotes around the
argument name.

  * If ` _ scale_expr  _ ` is negative, it specifies the number of places  before  the decimal point to which to adjust the number. For example, if the scale is -2, the result is a multiple of 100. 

  * If ` _ scale_expr  _ ` is larger than the input expression scale, the function does not have any effect. 

  * If either the ` _ input_expr  _ ` or the ` _ scale_expr  _ ` is NULL, the result is NULL. 

  * By default, half-points are rounded away from zero for decimals. For example, -0.5 is rounded to -1.0. 

To change the rounding mode to round the value [ half to even
](https://en.wikipedia.org/wiki/Rounding#Rounding_half_to_even) (e.g. to round
-0.5 to 0), pass in ` 'HALF_TO_EVEN'  ` for the ` _ rounding_mode  _ `
argument.

Note

If you specify the ` _ rounding_mode  _ ` argument, the data type of the ` _
input_expr  _ ` argument must be [ one of the data types for a fixed-point
number  ](../data-types-numeric.html#label-data-types-for-fixed-point-numbers)
.

  * Floating point numbers are approximate values. A floating point number might not round as expected. 

  * If rounding brings the number outside of the range of values of the data type, the function returns an error. 

##  Examples  ¶

This first example shows a simple use of ` ROUND  ` , with the default number
of decimal places (0):

    
    
    SELECT ROUND(135.135), ROUND(-975.975);
    +----------------+-----------------+
    | ROUND(135.135) | ROUND(-975.975) |
    |----------------+-----------------|
    |            135 |            -976 |
    +----------------+-----------------+
    

Copy

The next example uses a range of values for the scale parameter:

    
    
    SELECT n, scale, ROUND(n, scale)
      FROM test_ceiling
      ORDER BY n, scale;
    +----------+-------+-----------------+
    |        N | SCALE | ROUND(N, SCALE) |
    |----------+-------+-----------------|
    | -975.975 |    -1 |        -980     |
    | -975.975 |     0 |        -976     |
    | -975.975 |     2 |        -975.98  |
    |  135.135 |    -2 |         100     |
    |  135.135 |     0 |         135     |
    |  135.135 |     1 |         135.1   |
    |  135.135 |     3 |         135.135 |
    |  135.135 |    50 |         135.135 |
    |  135.135 |  NULL |            NULL |
    +----------+-------+-----------------+
    

Copy

The next two examples show the difference between using the default rounding
mode ( ` 'HALF_AWAY_FROM_ZERO'  ` ) and the rounding mode ` 'HALF_TO_EVEN'  `
. Both examples call the ROUND function twice, first with the default rounding
behavior, then with ` 'HALF_TO_EVEN'  ` .

The first example uses a positive input value of 2.5:

    
    
    SELECT ROUND(2.5, 0), ROUND(2.5, 0, 'HALF_TO_EVEN');
    

Copy

    
    
    +---------------+-------------------------------+
    | ROUND(2.5, 0) | ROUND(2.5, 0, 'HALF_TO_EVEN') |
    |---------------+-------------------------------|
    |             3 |                             2 |
    +---------------+-------------------------------+
    

The second example uses a negative input value of -2.5:

    
    
    SELECT ROUND(-2.5, 0), ROUND(2.5, 0, 'HALF_TO_EVEN');
    

Copy

    
    
    +---------------+--------------------------------+
    | ROUND(2.5, 0) | ROUND(-2.5, 0, 'HALF_TO_EVEN') |
    |---------------+--------------------------------|
    |            -3 |                             -2 |
    +---------------+--------------------------------+
    

The next two examples demonstrate how to specify the arguments to the function
by name, rather than by position.

    
    
    SELECT ROUND(
      EXPR => -2.5,
      SCALE => 0);
    

Copy

    
    
    +---------------------------------+
    | ROUND(EXPR => -2.5, SCALE => 0) |
    |---------------------------------|
    |                              -3 |
    +---------------------------------+
    
    
    
    SELECT ROUND(
      EXPR => -2.5,
      SCALE => 0,
      ROUNDING_MODE => 'HALF_TO_EVEN');
    

Copy

    
    
    +------------------------------------------------------------------+
    | ROUND(EXPR => -2.5, SCALE => 0, ROUNDING_MODE => 'HALF_TO_EVEN') |
    |------------------------------------------------------------------|
    |                                                               -2 |
    +------------------------------------------------------------------+
    

The next example shows that FLOAT values are not always stored exactly. As you
can see below, in some cases .005 is rounded to .01, while in other cases it
is rounded to 0. The difference is not in the rounding; the difference is
actually in the underlying representation of the floating point number; 1.005
is stored as a number very slightly smaller than 1.005 (approximately
1.004999). The DECIMAL value, however is stored as an exact number, and is
rounded to .01 as expected in all cases.

Create and load a table:

>
>     CREATE OR REPLACE TEMP TABLE rnd1(f float, d DECIMAL(10, 3));
>     INSERT INTO rnd1 (f, d) VALUES
>           ( -10.005,  -10.005),
>           (  -1.005,   -1.005),
>           (   1.005,    1.005),
>           (  10.005,   10.005)
>           ;
>  
>
> Copy

Show examples of the difference between rounded FLOAT values and rounded
DECIMAL values:

>
>     select f, round(f, 2),
>            d, round(d, 2)
>         from rnd1
>         order by 1;
>     +---------+-------------+---------+-------------+
>     |       F | ROUND(F, 2) |       D | ROUND(D, 2) |
>     |---------+-------------+---------+-------------|
>     | -10.005 |      -10.01 | -10.005 |      -10.01 |
>     |  -1.005 |       -1    |  -1.005 |       -1.01 |
>     |   1.005 |        1    |   1.005 |        1.01 |
>     |  10.005 |       10.01 |  10.005 |       10.01 |
>     +---------+-------------+---------+-------------+
>  
>
> Copy

