  SYSTEM$REFERENCE  ¶

[ ![Snowflake logo in black \(no text\)](../../_images/logo-snowflake-
black.png) ](../../_images/logo-snowflake-black.png) [ Preview Feature
](../../release-notes/preview-features) — Open

Available to all accounts.

Returns a [ reference  ](../references) to an object (a table, view, or
function). When you execute SQL actions on a reference to an object, the
actions are performed using the role of the user who created the reference.

Note

As an alternative to calling this function, you can use the TABLE keyword, if
you need to create a reference to an object that you don’t plan to modify (for
example, if you are passing in a table that the stored procedure will query)
and you want that reference to be valid for the scope of the call (rather than
for the entire session). See [ Using the TABLE keyword to create a reference
to a table, view, or query  ](../../developer-guide/stored-procedure/stored-
procedures-calling-references.html#label-reference-object-table-keyword) .

See also:

    

[ SYSTEM$QUERY_REFERENCE  ](system_query_reference)

##  Syntax  ¶

    
    
    SYSTEM$REFERENCE('<object_type>', '<object_identifier>',
      [ , '<reference_scope>' [ , '<privilege>' [ , '<privilege>' ... ] ] ] )
    

Copy

##  Arguments  ¶

**Required**

` '  _ object_type  _ '  `

    

Type of the object. You can specify one of the following values:

  * ` api_integration  `

  * ` compute_pool  `

  * ` database  `

  * ` external_table  `

  * ` function  `

  * ` materialized_view  `

  * ` pipe  `

  * ` procedure  `

  * ` schema  `

  * ` table  `

  * ` task  `

  * ` view  `

  * ` warehouse  `

` '  _ object_identifier  _ '  `

    

Identifier for the object. If the identifier contains spaces or special
characters, the entire string must be enclosed in double quotes. Identifiers
enclosed in double quotes are also case-sensitive.

For more details about identifiers, see [ Identifier requirements
](../identifiers-syntax) .

**Optional**

` '  _ reference_scope  _ '  `

    

Specifies the scope of the reference.

If ` 'CALL'  ` or omitted, specifies that the reference is valid within the
context in which it was created. See [ Specifying the scope of the reference
](../../developer-guide/stored-procedure/stored-procedures-calling-
references.html#label-reference-object-scope) .

If ` 'SESSION'  ` , specifies that the reference should be valid for the
duration for the session.

If ` 'PERSISTENT'  ` , specifies that the reference should be valid until the
object is dropped. See [ persistent references  ](../references.html#label-
persistent-reference) .

Note: If you need to specify the ` '  _ privilege  _ '  ` argument, the ` '  _
reference_scope  _ '  ` argument is required.

Valid values:

  * ` 'CALL'  `

  * ` 'SESSION'  `

  * ` 'PERSISTENT'  `

Default value: ` 'CALL'  `

` '  _ privilege  _ '  `

    

Additional [ privilege  ](../../user-guide/security-access-control-privileges)
that is needed to perform an SQL action on the object.

For example, suppose that you are passing the reference for a table to a
stored procedure that inserts rows into that table. Specify ` 'INSERT'  ` to
confer the INSERT privilege on that table to the stored procedure.

For a list of supported objects and privileges, see [ Supported object types
and privileges for references  ](../references.html#label-references-
supported-objects-and-privileges) .

To specify more than one additional privilege, pass each privilege name as an
additional argument to the function. For example, to confer the INSERT,
UPDATE, and TRUNCATE privileges:

    
    
    CALL myprocedure( SYSTEM$REFERENCE('TABLE', 'table_with_different_owner', 'SESSION', 'INSERT'. 'UPDATE', 'TRUNCATE'));
    

Copy

Note that you cannot specify OWNERSHIP or ALL as privileges.

##  Returns  ¶

A serialized string representation of the reference that can be used as an
identifier.

##  Usage notes  ¶

The ` '  _ object_type  _ '  ` argument must match the type of the object
specified by ` _ object_identifier  _ ` .

##  Troubleshooting  ¶

The following scenarios can help you troubleshoot issues that can occur.

Error

|

    
    
    505028 (42601): Object type <object_type> does not match the specified type <type_of_the_specified_object> for reference creation
      
  
---|---  
  
Cause

|

If you try to create a reference using the SYSTEM$REFERENCE function and the `
_ object_type  _ ` argument does not match the type of the object specified by
` _ object_identifier  _ ` , the function fails. For example, if the ` _
object_type  _ ` argument is TABLE, but ` _ object_identifier  _ ` resolves to
an object type other than TABLE (for example, VIEW), the function fails.  
  
Solution

|

Verify that the type of the object specified by ` _ object_identifier  _ `
matches the ` _ object_type  _ ` argument. For a list of supported object
types, see [ Supported object types and privileges for references
](../references.html#label-references-supported-objects-and-privileges) .  
  
##  Examples  ¶

See [ Background: The problem with passing tables, views, and queries to
stored procedures  ](../../developer-guide/stored-procedure/stored-procedures-
calling-references.html#label-reference-object-example) .

