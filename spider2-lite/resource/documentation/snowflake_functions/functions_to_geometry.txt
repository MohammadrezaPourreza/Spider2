  TO_GEOMETRY  ¶

Parses an input and returns a value of type [ GEOMETRY  ](../data-types-
geospatial.html#label-data-types-geometry) .

See also:

    

[ TRY_TO_GEOMETRY  ](try_to_geometry) , [ ST_GEOMETRYFROMWKB
](st_geometryfromwkb) , [ ST_GEOMETRYFROMWKT  ](st_geometryfromwkt)

##  Syntax  ¶

Use one of the following:

    
    
    TO_GEOMETRY( <varchar_expression> [ , <srid> ] [ , <allow_invalid> ] )
    
    TO_GEOMETRY( <binary_expression> [ , <srid> ] [ , <allow_invalid> ] )
    
    TO_GEOMETRY( <variant_expression> [ , <srid> ] [ , <allow_invalid> ] )
    
    TO_GEOMETRY( <geography_expression> [ , <srid> ] [ , <allow_invalid> ] )
    

Copy

##  Arguments  ¶

**Required:**

` _ varchar_expression  _ `

    

The argument must be a string expression that represents a valid geometric
object in one of the following formats:

  * WKT (well-known text). 

  * WKB (well-known binary) in hexadecimal format (without a leading ` 0x  ` ). 

  * EWKT (extended well-known text). 

  * EWKB (extended well-known binary) in hexadecimal format (without a leading ` 0x  ` ). 

  * GeoJSON. 

` _ binary_expression  _ `

    

The argument must be a binary expression in WKB or EWKB format.

` _ variant_expression  _ `

    

The argument must be an OBJECT in GeoJSON format.

` _ geography_expression  _ `

    

The argument must be an expression of type GEOGRAPHY.

**Optional:**

` _ srid  _ `

    

The integer value of the SRID to use.

` _ allow_invalid  _ `

    

If TRUE, specifies that the function should return a GEOGRAPHY or GEOMETRY
object, even when the input shape is invalid and cannot be repaired. For
details, refer to [ Specifying how invalid geospatial shapes are handled
](../data-types-geospatial.html#label-geospatial-invalid-shape-handling-intro)
.

##  Returns  ¶

The function returns a value of type [ GEOMETRY  ](../data-types-
geospatial.html#label-data-types-geometry) .

##  Usage notes  ¶

  * Issues an error if the input cannot be parsed as one of the supported formats (WKT, WKB, EWKT, EWKB, GeoJSON). 

  * For GeoJSON, WKT, and WKB input, if the ` _ srid  _ ` argument is not specified, the resulting GEOMETRY object has the SRID set to 0. 

  * To construct a GEOMETRY object from WKT or EWKT input, you can also use [ ST_GEOMETRYFROMWKT  ](st_geometryfromwkt) . 

  * To construct a GEOMETRY object from WKB or EWKB input, you can also use [ ST_GEOMETRYFROMWKB  ](st_geometryfromwkb) . 

##  Examples  ¶

The following example shows how to use the TO_GEOMETRY function to convert an
object represented in WKT to a GEOMETRY object. The example does not specify
the ` _ srid  _ ` argument, and the SRID is not specified in the input
representation of the object, so the SRID is set to 0.

    
    
    ALTER SESSION SET GEOMETRY_OUTPUT_FORMAT='EWKT';
    
    SELECT TO_GEOMETRY('POINT(1820.12 890.56)');
    

Copy

    
    
    +--------------------------------------+
    | TO_GEOMETRY('POINT(1820.12 890.56)') |
    |--------------------------------------|
    | SRID=0;POINT(1820.12 890.56)         |
    +--------------------------------------+
    

The following example converts an object represented in EWKT to a GEOMETRY
object. The input EKWT specifies the SRID to use:

    
    
    ALTER SESSION SET GEOMETRY_OUTPUT_FORMAT='EWKT';
    
    SELECT TO_GEOMETRY('SRID=4326;POINT(1820.12 890.56)');
    

Copy

    
    
    +------------------------------------------------+
    | TO_GEOMETRY('SRID=4326;POINT(1820.12 890.56)') |
    |------------------------------------------------|
    | SRID=4326;POINT(1820.12 890.56)                |
    +------------------------------------------------+
    

The following example demonstrates how to specify the SRID as the ` _ srid  _
` input argument:

    
    
    ALTER SESSION SET GEOMETRY_OUTPUT_FORMAT='EWKT';
    
    SELECT TO_GEOMETRY('POINT(1820.12 890.56)', 4326);
    

Copy

    
    
    +--------------------------------------------+
    | TO_GEOMETRY('POINT(1820.12 890.56)', 4326) |
    |--------------------------------------------|
    | SRID=4326;POINT(1820.12 890.56)            |
    +--------------------------------------------+
    

The following example returns the GEOMETRY object for a geospatial object with
a Z coordinate described in EWKT format:

    
    
    ALTER SESSION SET GEOMETRY_OUTPUT_FORMAT='EWKT';
    
    SELECT TO_GEOMETRY('SRID=32633;POINTZ(389866.35 5819003.03 30)');
    

Copy

    
    
    +-----------------------------------------------------------+
    | TO_GEOMETRY('SRID=32633;POINTZ(389866.35 5819003.03 30)') |
    |-----------------------------------------------------------|
    | SRID=32633;POINTZ(389866.35 5819003.03 30)                |
    +-----------------------------------------------------------+
    

For examples that convert a GEOGRAPHY object to a GEOMETRY object, see [
Converting between GEOGRAPHY and GEOMETRY  ](../data-types-
geospatial.html#label-geometry-geography-converting) .

