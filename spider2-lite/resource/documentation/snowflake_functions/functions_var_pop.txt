  VAR_POP  ¶

Returns the population variance of non-NULL records in a group. If all records
inside a group are NULL, a NULL is returned.

Aliases:

    

[ VARIANCE_POP  ](variance_pop)

##  Syntax  ¶

**Aggregate function**

    
    
    VAR_POP( [ DISTINCT ] <expr1> )
    

Copy

**Window function**

    
    
    VAR_POP( [ DISTINCT ] <expr1> ) OVER (
                                         [ PARTITION BY <expr2> ]
                                         [ ORDER BY <expr3> [ ASC | DESC ] [ <window_frame> ] ]
                                         )
    

Copy

For details about ` _ window_frame  _ ` syntax, see [ Usage notes for window
frames  ](../functions-analytic.html#label-window-frames) .

##  Arguments  ¶

` _ expr1  _ `

    

The ` _ expr1  _ ` should evaluate to one of the numeric data types.

` _ expr2  _ `

    

This is the optional expression to partition by.

` _ expr3  _ `

    

This is the optional expression to order by within each partition.

##  Returns  ¶

The data type of the returned value is ` NUMBER(<precision>,  <scale>)  ` .
The scale depends upon the values being processed.

##  Usage notes  ¶

  * When passed a VARCHAR expression, this function implicitly casts the input to floating point values. If the cast cannot be performed, an error is returned. 

  * When this function is called as a window function with an OVER clause that contains an ORDER BY clause: 

    * A window frame is required. If no window frame is specified explicitly, the following implied window frame is used: 

` RANGE  BETWEEN  UNBOUNDED  PRECEDING  AND  CURRENT  ROW  `

For information about window frames, including syntax and examples, see [
Usage notes for window frames  ](../functions-analytic.html#label-window-
frames) .

    * Using the keyword DISTINCT inside the window function is prohibited and results in a compile-time error. 

##  Examples  ¶

This example shows how to use the ` VAR_POP  ` function:

> Create and fill a table:
>

>>

>>     create table aggr(k int, v decimal(10,2), v2 decimal(10, 2));

>>     insert into aggr values

>>        (1, 10, null),

>>        (2, 10, 11),

>>        (2, 20, 22),

>>        (2, 25, null),

>>        (2, 30, 35);

>>  
>>

>> Copy

>
> Query the table, calling VAR_POP():
>

>>

>>     SELECT k, var_pop(v), var_pop(v2)

>>         FROM aggr

>>         GROUP BY k

>>         ORDER BY k;

>>     +---+---------------+---------------+

>>     | K |    VAR_POP(V) |   VAR_POP(V2) |

>>     |---+---------------+---------------|

>>     | 1 |  0.0000000000 |          NULL |

>>     | 2 | 54.6875000000 | 96.2222222222 |

>>     +---+---------------+---------------+

>>  
>>

>> Copy

