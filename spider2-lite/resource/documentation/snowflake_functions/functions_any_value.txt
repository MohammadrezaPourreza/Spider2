  ANY_VALUE  ¶

Returns some value of the expression from the group. The result is non-
deterministic.

##  Syntax  ¶

**Aggregate function**

    
    
    ANY_VALUE( [ DISTINCT ] <expr1> )
    

Copy

**Window function**

    
    
    ANY_VALUE( [ DISTINCT ] <expr1> ) OVER ( [ PARTITION BY <expr2> ] )
    

Copy

##  Usage notes  ¶

  * The DISTINCT keyword can be specified for this function, but it does not have any effect. 

  * When used as a window function: 

>     * This function does not support:
>

>>       * ORDER BY sub-clause in the OVER() clause.

>>

>>       * Window frames.

##  Using ANY_VALUE with GROUP BY statements  ¶

ANY_VALUE can simplify and optimize the performance of [ GROUP BY
](../constructs/group-by) statements. A common problem for many queries is
that the result of a query with a GROUP BY clause can only contain expressions
used in the GROUP BY clause itself, or results of aggregate functions. For
example:

    
    
    SELECT customer.id , customer.name , SUM(orders.value)
        FROM customer
        JOIN orders ON customer.id = orders.customer_id
        GROUP BY customer.id , customer.name;
    

Copy

In this query, the ` customer.name  ` attribute needs to be in the GROUP BY to
be included in the result. This is unnecessary (e.g. when ` customer.id  ` is
known to be unique) and makes the computation possibly more complex and
slower. Another option is to use an aggregate function. For example:

    
    
    SELECT customer.id , MIN(customer.name) , SUM(orders.value)
        FROM customer
        JOIN orders ON customer.id = orders.customer_id
        GROUP BY customer.id;
    

Copy

This simplifies the GROUP BY clause, but still requires computing the [ MIN
](min) function, which incurs an extra cost.

With ANY_VALUE, you can execute the following query:

    
    
    SELECT customer.id , ANY_VALUE(customer.name) , SUM(orders.value)
        FROM customer
        JOIN orders ON customer.id = orders.customer_id
        GROUP BY customer.id;
    

Copy

