[
    {
        "instance_id": "sf001",
        "score": 1,
        "pred_sql": "WITH timestamps AS\n(   \n    SELECT\n        DATE_TRUNC(year,DATEADD(year,-1,DATE '2024-08-29')) AS ref_timestamp,\n        LAST_DAY(DATEADD(week,2 + CAST(WEEKISO(ref_timestamp) != 1 AS INTEGER),ref_timestamp),week) AS end_week,\n        DATEADD(day, day_num - 7, end_week) AS date_valid_std\n    FROM\n    (   \n        SELECT\n            ROW_NUMBER() OVER (ORDER BY SEQ1()) AS day_num\n        FROM\n            TABLE(GENERATOR(rowcount => 7))\n    ) \n)\nSELECT\n    country,\n    postal_code,\n    date_valid_std,\n    tot_snowfall_in \nFROM \n    GLOBAL_WEATHER__CLIMATE_DATA_FOR_BI.standard_tile.history_day\nNATURAL INNER JOIN\n    timestamps\nWHERE\n    country='US' AND\n    tot_snowfall_in > 6.0 \nORDER BY \n    postal_code,date_valid_std\n;",
        "error_info": null
    },
    {
        "instance_id": "sf002",
        "score": 1,
        "pred_sql": "WITH big_banks AS (\n    SELECT id_rssd\n    FROM FINANCE__ECONOMICS.CYBERSYN.financial_institution_timeseries\n    WHERE variable = 'ASSET'\n      AND date = '2022-12-31'\n      AND value > 1E10\n)\nSELECT name\nFROM FINANCE__ECONOMICS.CYBERSYN.financial_institution_timeseries AS ts\nINNER JOIN FINANCE__ECONOMICS.CYBERSYN.financial_institution_attributes AS att ON (ts.variable = att.variable)\nINNER JOIN FINANCE__ECONOMICS.CYBERSYN.financial_institution_entities AS ent ON (ts.id_rssd = ent.id_rssd)\nINNER JOIN big_banks ON (big_banks.id_rssd = ts.id_rssd)\nWHERE ts.date = '2022-12-31'\n  AND att.variable_name = '% Insured (Estimated)'\n  AND att.frequency = 'Quarterly'\n  AND ent.is_active = True\nORDER BY (1 - value) DESC\nLIMIT 10;",
        "error_info": null
    },
    {
        "instance_id": "sf003",
        "score": 1,
        "pred_sql": "WITH zip_stats AS (\n    SELECT\n        YEAR(ts.date) AS year,\n        ts.geo_id AS zip,\n        rship.related_geo_name AS state,\n        ts.value AS population,\n        LAG(ts.value, 1) OVER (PARTITION BY zip ORDER BY year ASC) AS prev_year_population,\n        population / prev_year_population - 1 AS pct_growth,\n        population - prev_year_population AS absolute_change\n    FROM GLOBAL_GOVERNMENT.CYBERSYN.american_community_survey_timeseries AS ts\n    JOIN GLOBAL_GOVERNMENT.CYBERSYN.american_community_survey_attributes AS att\n        ON ts.variable = att.variable\n    JOIN GLOBAL_GOVERNMENT.CYBERSYN.geography_index AS geo\n        ON ts.geo_id = geo.geo_id\n    JOIN GLOBAL_GOVERNMENT.CYBERSYN.geography_relationships AS rship\n        ON ts.geo_id = rship.geo_id AND rship.related_level = 'State'\n    WHERE\n        att.series_type = 'Total Population'\n        AND att.measurement_type = 'Estimate'\n        AND att.measurement_period = '5YR'\n        AND geo.level = 'CensusZipCodeTabulationArea'\n        AND ts.value > 25000\n)\n\nSELECT\n    year,\n    zip,\n    state,\n    pct_growth AS growth_percentage\nFROM (\n    SELECT\n        *,\n        ROW_NUMBER() OVER (PARTITION BY year ORDER BY pct_growth DESC NULLS LAST) AS annual_rank\n    FROM zip_stats\n    WHERE year BETWEEN 2015 AND 2020\n)\nWHERE annual_rank = 2\nORDER BY year;",
        "error_info": null
    },
    {
        "instance_id": "sf006",
        "score": 1,
        "pred_sql": "WITH pre_covid AS (\n    SELECT state_abbreviation,\n           COUNT(*) AS pre_covid_count\n    FROM FINANCE__ECONOMICS.CYBERSYN.financial_branch_entities\n    WHERE start_date <= '2020-03-01'\n      AND (end_date >= '2020-03-01' OR end_date IS NULL)\n    GROUP BY state_abbreviation\n)\nSELECT cur.state_abbreviation,\n       pre_covid_count,\n       COUNT(*) AS current_count,\n       (current_count / CAST(pre_covid_count AS FLOAT)) - 1 AS pct_change\nFROM FINANCE__ECONOMICS.CYBERSYN.financial_branch_entities AS cur\nINNER JOIN pre_covid ON (cur.state_abbreviation = pre_covid.state_abbreviation)\nWHERE (end_date IS NULL OR end_date >= '2021-12-31')\nGROUP BY cur.state_abbreviation, pre_covid_count\nORDER BY pct_change DESC;\n",
        "error_info": null
    },
    {
        "instance_id": "sf008",
        "score": 1,
        "pred_sql": "WITH county_map AS (\n    SELECT\n        geo_id,\n        geo_name,\n        related_geo_id,\n        related_geo_name\n    FROM US_REAL_ESTATE.CYBERSYN.geography_relationships\n    WHERE geo_name = 'Phoenix-Mesa-Scottsdale, AZ Metro Area'\n    AND related_level = 'County'\n), \ngross_income_data AS (\n    SELECT\n        geo_id,\n        date,\n        SUM(value) AS gross_income_inflow\n    FROM US_REAL_ESTATE.CYBERSYN.irs_origin_destination_migration_timeseries AS ts\n    JOIN county_map ON (county_map.related_geo_id = ts.to_geo_id)\n    WHERE ts.variable_name = 'Adjusted Gross Income'\n    GROUP BY geo_id, date\n), \nhome_price_data AS (\n    SELECT LAST_DAY(date, 'year') AS end_date, AVG(value) AS home_price_index\n    FROM US_REAL_ESTATE.CYBERSYN.fhfa_house_price_timeseries AS ts\n    JOIN US_REAL_ESTATE.CYBERSYN.fhfa_house_price_attributes AS att\n        ON (ts.variable = att.variable)\n    WHERE geo_id IN (SELECT geo_id FROM county_map)\n      AND att.index_type = 'purchase-only'\n      AND att.seasonally_adjusted = TRUE\n    GROUP BY end_date\n),\ncombined_data AS (\n    SELECT\n        gid.date,\n        gid.gross_income_inflow,\n        hpi.home_price_index\n    FROM gross_income_data AS gid\n    JOIN home_price_data AS hpi ON (gid.date = hpi.end_date)\n),\naggregated_data AS (\n    SELECT\n        MIN(date) AS first_year,\n        MAX(date) AS last_year\n    FROM combined_data\n),\nsummary_data AS (\n    SELECT\n        first_year,\n        last_year,\n        first_income.gross_income_inflow AS first_year_income,\n        last_income.gross_income_inflow AS last_year_income,\n        first_index.home_price_index AS first_year_index,\n        last_index.home_price_index AS last_year_index\n    FROM aggregated_data AS ad\n    JOIN combined_data AS first_income ON (first_income.date = ad.first_year)\n    JOIN combined_data AS last_income ON (last_income.date = ad.last_year)\n    JOIN combined_data AS first_index ON (first_index.date = ad.first_year)\n    JOIN combined_data AS last_index ON (last_index.date = ad.last_year)\n)\nSELECT\n    ((last_year_income - first_year_income) / first_year_income) * 100 AS income_growth_percent,\n    ((last_year_index - first_year_index) / first_year_index) * 100 AS index_growth_percent\nFROM summary_data;",
        "error_info": null
    },
    {
        "instance_id": "sf009",
        "score": 1,
        "pred_sql": "WITH BUILDING AS(\nSELECT A.NAMES['local']::VARCHAR AS NAME\n     ,B.Class\n     ,B.subclass\n     ,count(*) num_buidling\n     ,SUM(B.surface_area_sq_m) sum_surface_area_sq_m\n FROM NETHERLANDS_OPEN_MAP_DATA.NETHERLANDS.V_ADMINISTRATIVE A\nINNER\n JOIN(SELECT Class\n            ,subclass\n            ,surface_area_sq_m\n            ,GEO_CORDINATES\n        FROM NETHERLANDS_OPEN_MAP_DATA.NETHERLANDS.V_BUILDING\n       WHERE SUBSTR(QUADKEY\n             ,0\n             ,8) IN ('12020210', '12020211')) B\n   ON ST_COVERS(A.GEO_CORDINATES\n            ,B.GEO_CORDINATES)\nWHERE A.id IN('r324431@56'\n            ,'r47811@69')\nGROUP BY A.NAMES['local']\n     ,B.Class\n     ,B.subclass\nORDER BY B.class\n     ,B.subclass)\nSELECT CLASS,\nSUBCLASS,\nMAX(CASE WHEN NAME='Amsterdam' THEN sum_surface_area_sq_m END) AS SUM_SURFACE_AREA_SQ_M_AMSTERDAM,\nMAX(CASE WHEN NAME='Rotterdam' THEN sum_surface_area_sq_m END) AS SUM_SURFACE_AREA_SQ_M_ROTTERDAM,\nMAX(CASE WHEN NAME='Amsterdam' THEN num_buidling END) AS NUM_OF_BUILDING_AMSTERDAM,\nMAX(CASE WHEN NAME='Rotterdam' THEN num_buidling END) AS NUM_OF_BUILDING_ROTTERDAM\nFROM BUILDING\nGROUP BY CLASS,SUBCLASS\nORDER BY CLASS,SUBCLASS;",
        "error_info": null
    },
    {
        "instance_id": "sf010",
        "score": 1,
        "pred_sql": "SELECT\n    ts.date,\n    SUM(ts.value) AS pct_near_default\nFROM\n    US_REAL_ESTATE.CYBERSYN.fhfa_mortgage_performance_timeseries AS ts\n    JOIN US_REAL_ESTATE.CYBERSYN.fhfa_mortgage_performance_attributes AS att ON (ts.variable = att.variable)\n    JOIN US_REAL_ESTATE.CYBERSYN.geography_index AS geo ON (geo.geo_id = ts.geo_id)\nWHERE\n    att.variable_group IN (\n        'Percent 90 to 180 Days Past Due Date',\n        'Percent in Forbearance',\n        'Percent in the Process of Foreclosure, Bankruptcy, or Deed in Lieu'\n    )\n    AND att.market = 'All Mortgages'\n    AND geo.geo_name = 'California'\n    AND YEAR(ts.date) = 2023\nGROUP BY\n    ts.date\nORDER BY\n    ts.date;",
        "error_info": null
    },
    {
        "instance_id": "sf011",
        "score": 1,
        "pred_sql": " WITH TractPop AS (\n    SELECT\n        CG.\"BlockGroupID\",\n        FCV.\"CensusValue\",\n        CG.\"StateCountyTractID\",\n        CG.\"BlockGroupPolygon\"\n    FROM\n        CENSUS_GALAXY__ZIP_CODE_TO_BLOCK_GROUP_SAMPLE.PUBLIC.\"Dim_CensusGeography\" CG\n    JOIN\n        CENSUS_GALAXY__ZIP_CODE_TO_BLOCK_GROUP_SAMPLE.PUBLIC.\"Fact_CensusValues_ACS2021\" FCV\n        ON CG.\"BlockGroupID\" = FCV.\"BlockGroupID\"\n    WHERE\n        CG.\"StateAbbrev\" = 'NY'\n        AND FCV.\"MetricID\" = 'B01003_001E'\n),\n\nTractGroup AS (\n    SELECT\n        CG.\"StateCountyTractID\",\n        SUM(FCV.\"CensusValue\") AS \"TotalTractPop\"\n    FROM\n        CENSUS_GALAXY__ZIP_CODE_TO_BLOCK_GROUP_SAMPLE.PUBLIC.\"Dim_CensusGeography\" CG\n    JOIN\n        CENSUS_GALAXY__ZIP_CODE_TO_BLOCK_GROUP_SAMPLE.PUBLIC.\"Fact_CensusValues_ACS2021\" FCV\n        ON CG.\"BlockGroupID\" = FCV.\"BlockGroupID\"\n    WHERE\n        CG.\"StateAbbrev\" = 'NY'\n        AND FCV.\"MetricID\" = 'B01003_001E'\n    GROUP BY\n        CG.\"StateCountyTractID\"\n)\n\nSELECT\n    TP.\"BlockGroupID\",\n    TP.\"CensusValue\",\n    TP.\"StateCountyTractID\",\n    TG.\"TotalTractPop\",\n    CASE WHEN TG.\"TotalTractPop\" <> 0 THEN TP.\"CensusValue\" / TG.\"TotalTractPop\" ELSE 0 END AS \"BlockGroupRatio\"\nFROM\n    TractPop TP\nJOIN\n    TractGroup TG\n    ON TP.\"StateCountyTractID\" = TG.\"StateCountyTractID\";",
        "error_info": null
    },
    {
        "instance_id": "sf012",
        "score": 1,
        "pred_sql": "SELECT \n    YEAR(claims.date_of_loss)               AS year_of_loss,\n    claims.nfip_community_name,\n    SUM(claims.building_damage_amount) AS total_building_damage_amount,\n    SUM(claims.contents_damage_amount) AS total_contents_damage_amount\nFROM WEATHER__ENVIRONMENT.CYBERSYN.fema_national_flood_insurance_program_claim_index claims\nWHERE \n    claims.nfip_community_name = 'City Of New York' \n    AND year_of_loss >=2010 AND year_of_loss <=2019\nGROUP BY year_of_loss, claims.nfip_community_name\nORDER BY year_of_loss, claims.nfip_community_name;",
        "error_info": null
    },
    {
        "instance_id": "sf013",
        "score": 1,
        "pred_sql": "WITH ROAD AS(\nSELECT A.NAMES['local']::VARCHAR AS NAME\n     ,R.Class\n     ,R.subclass\n     ,SUM(R.length_m) AS SUM_OF_LENGTH\n FROM NETHERLANDS_OPEN_MAP_DATA.NETHERLANDS.V_ADMINISTRATIVE A\nINNER\n JOIN(SELECT Class\n            ,subclass\n            ,length_m\n            ,GEO_CORDINATES\n        FROM NETHERLANDS_OPEN_MAP_DATA.NETHERLANDS.V_ROAD \n       WHERE SUBSTR(QUADKEY\n             ,0\n             ,8) IN ('12020210', '12020211')) R\n   ON ST_COVERS(A.GEO_CORDINATES\n            ,R.GEO_CORDINATES)\nWHERE A.id IN('r324431@56'\n            ,'r47811@69')\nGROUP BY A.NAMES['local']\n     ,R.Class\n     ,R.subclass\nORDER BY R.class\n     ,R.subclass)\nSELECT CLASS,\nSUBCLASS,\nMAX(CASE WHEN NAME='Amsterdam' THEN SUM_OF_LENGTH END) AS AMSTERDAM,\nMAX(CASE WHEN NAME='Rotterdam' THEN SUM_OF_LENGTH END) AS ROTTERDAM\nFROM ROAD\nGROUP BY CLASS,SUBCLASS\nORDER BY CLASS,SUBCLASS;",
        "error_info": null
    },
    {
        "instance_id": "sf014",
        "score": 1,
        "pred_sql": "WITH Commuters AS (\n    SELECT\n        GE.\"ZipCode\",\n        SUM(CASE WHEN M.\"MetricID\" = 'B08303_013E' THEN F.\"CensusValueByZip\" ELSE 0 END +\n            CASE WHEN M.\"MetricID\" = 'B08303_012E' THEN F.\"CensusValueByZip\" ELSE 0 END) AS \"Num_Commuters_1Hr_Travel_Time\"\n    FROM\n        CENSUS_GALAXY__AIML_MODEL_DATA_ENRICHMENT_SAMPLE.PUBLIC.\"LU_GeographyExpanded\" GE\n    JOIN\n        CENSUS_GALAXY__AIML_MODEL_DATA_ENRICHMENT_SAMPLE.PUBLIC.\"Fact_CensusValues_ACS2021_ByZip\" F\n        ON GE.\"ZipCode\" = F.\"ZipCode\"\n    JOIN\n        CENSUS_GALAXY__AIML_MODEL_DATA_ENRICHMENT_SAMPLE.PUBLIC.\"Dim_CensusMetrics\" M\n        ON F.\"MetricID\" = M.\"MetricID\"\n    WHERE\n        GE.\"PreferredStateAbbrev\" = 'NY'\n        AND (M.\"MetricID\" = 'B08303_013E' OR M.\"MetricID\" = 'B08303_012E') -- Metric IDs for commuters with 1+ hour travel time\n    GROUP BY\n        GE.\"ZipCode\"\n),\n\nStateBenchmark AS (\n    SELECT\n        SB.\"StateAbbrev\",\n        SUM(SB.\"StateBenchmarkValue\") AS \"StateBenchmark_Over1HrTravelTime\",\n        SB.\"TotalStatePopulation\"\n    FROM\n        CENSUS_GALAXY__AIML_MODEL_DATA_ENRICHMENT_SAMPLE.PUBLIC.\"Fact_StateBenchmark_ACS2021\" SB\n    WHERE\n        SB.\"MetricID\" IN ('B08303_013E', 'B08303_012E')\n        AND SB.\"StateAbbrev\" = 'NY'\n    GROUP BY\n        SB.\"StateAbbrev\", SB.\"TotalStatePopulation\"\n)\n\nSELECT\n    C.\"ZipCode\",\n    SUM(C.\"Num_Commuters_1Hr_Travel_Time\") AS \"Total_Commuters_1Hr_Travel_Time\",\n    SB.\"StateBenchmark_Over1HrTravelTime\",\n    SB.\"TotalStatePopulation\",\nFROM\n    Commuters C\nCROSS JOIN\n    StateBenchmark SB\nGROUP BY\n    C.\"ZipCode\", SB.\"StateBenchmark_Over1HrTravelTime\", SB.\"TotalStatePopulation\"\nORDER BY\n    \"Total_Commuters_1Hr_Travel_Time\" DESC\nLIMIT 1;\n\n\n",
        "error_info": null
    },
    {
        "instance_id": "sf018",
        "score": 1,
        "pred_sql": "WITH push_send AS (\n    SELECT\n        id,\n        app_group_id,\n        user_id,\n        campaign_id,\n        message_variation_id,\n        platform,\n        ad_tracking_enabled,\n        TO_TIMESTAMP(TIME) AS \"TIME\",\n        'Send' AS \"EVENT_TYPE\"\n    FROM\n        BRAZE_USER_EVENT_DEMO_DATASET.PUBLIC.USERS_MESSAGES_PUSHNOTIFICATION_SEND_VIEW\n    WHERE\n        TO_TIMESTAMP(TIME) BETWEEN '2023-06-01 08:00:00' AND '2023-06-01 09:00:00'\n),\npush_bounce AS (\n    SELECT\n        id,\n        app_group_id,\n        user_id,\n        campaign_id,\n        message_variation_id,\n        platform,\n        ad_tracking_enabled,\n        TO_TIMESTAMP(TIME) AS \"TIME\",\n        'Bounce' AS \"EVENT_TYPE\"\n    FROM\n        BRAZE_USER_EVENT_DEMO_DATASET.PUBLIC.USERS_MESSAGES_PUSHNOTIFICATION_BOUNCE_VIEW\n    WHERE\n        TO_TIMESTAMP(TIME) BETWEEN '2023-06-01 08:00:00' AND '2023-06-01 09:00:00'\n),\npush_open AS (\n    SELECT\n        id,\n        app_group_id,\n        user_id,\n        campaign_id,\n        message_variation_id,\n        platform,\n        ad_tracking_enabled,\n        TO_TIMESTAMP(TIME) AS \"TIME\",\n        'Open' AS \"EVENT_TYPE\",\n        carrier,\n        browser,\n        device_model\n    FROM\n        BRAZE_USER_EVENT_DEMO_DATASET.PUBLIC.USERS_MESSAGES_PUSHNOTIFICATION_OPEN_VIEW\n    WHERE\n        TO_TIMESTAMP(TIME) BETWEEN '2023-06-01 08:00:00' AND '2023-06-01 09:00:00'\n),\npush_open_influence AS (\n    SELECT\n        id,\n        app_group_id,\n        user_id,\n        campaign_id,\n        message_variation_id,\n        platform,\n        TO_TIMESTAMP(TIME) AS \"TIME\",\n        'Influenced Open' AS \"EVENT_TYPE\",\n        carrier,\n        browser,\n        device_model\n    FROM\n        BRAZE_USER_EVENT_DEMO_DATASET.PUBLIC.USERS_MESSAGES_PUSHNOTIFICATION_INFLUENCEDOPEN_VIEW\n    WHERE\n        TO_TIMESTAMP(TIME) BETWEEN '2023-06-01 08:00:00' AND '2023-06-01 09:00:00'\n)\nSELECT\n    ps.app_group_id,\n    ps.campaign_id,\n    ps.user_id,\n    ps.time,\n    po.time push_open_time,\n    ps.message_variation_id,\n    ps.platform,\n    ps.ad_tracking_enabled,\n    po.carrier,\n    po.browser,\n    po.device_model,\n    COUNT(\n        DISTINCT ps.id\n    ) push_notification_sends,\n    COUNT(\n        DISTINCT ps.user_id\n    ) unique_push_notification_sends,\n    COUNT(\n        DISTINCT pb.id\n    ) push_notification_bounced,\n    COUNT(\n        DISTINCT pb.user_id\n    ) unique_push_notification_bounced,\n    COUNT(\n        DISTINCT po.id\n    ) push_notification_open,\n    COUNT(\n        DISTINCT po.user_id\n    ) unique_push_notification_opened,\n    COUNT(\n        DISTINCT poi.id\n    ) push_notification_influenced_open,\n    COUNT(\n        DISTINCT poi.user_id\n    ) unique_push_notification_influenced_open\nFROM\n    push_send ps\n    LEFT JOIN push_bounce pb\n    ON ps.message_variation_id = pb.message_variation_id\n    AND ps.user_id = pb.user_id\n    AND ps.app_group_id = pb.app_group_id\n    LEFT JOIN push_open po\n    ON ps.message_variation_id = po.message_variation_id\n    AND ps.user_id = po.user_id\n    AND ps.app_group_id = po.app_group_id\n    LEFT JOIN push_open_influence poi\n    ON ps.message_variation_id = poi.message_variation_id\n    AND ps.user_id = poi.user_id\n    AND ps.app_group_id = poi.app_group_id\nGROUP BY\n    1,2,3,4,5,6,7,8,9,10,11;\n",
        "error_info": null
    },
    {
        "instance_id": "sf029",
        "score": 1,
        "pred_sql": "select date\n, asin\n, max(sa.product_title)\n, sum(sa.ordered_units) as ordered_units, sum(sa.ordered_revenue) as ordered_revenue\n, sa.ordered_revenue/NULLIF(sa.ordered_units,0) as ASP\n, sum(tr.glance_views) as glance_views\n, CAST(sa.ordered_units as decimal(5,2))/NULLIF(tr.glance_views,0) as conversion_rate\n, sum(sa.shipped_units) as shipped_units\n, sum(sa.shipped_revenue) as shipped_revenue\n, avg(net_ppm) as net_ppm\n, avg(procurable_product_oos) as procurable_product_oos\n, sum(sellable_on_hand_units) as sellable_on_hand_units\n, sum(sellable_on_hand_inventory) as sellable_on_hand_value\n, sum(net_received) as net_received_value\n, sum(net_received_units) as net_received_units\n, sum(open_purchase_order_quantity) as open_purchase_order_quantity\n, sum(unfilled_customer_ordered_units) as unfilled_customer_ordered_units\n, avg(vendor_confirmation_rate) as vendor_confirmation_rate\n, avg(receive_fill_rate) as receive_fill_rate\n, avg(sell_through_rate) as sell_through_rate\n, avg(overall_vendor_lead_time_days) as vendor_lead_time_days\n\nfrom AMAZON_VENDOR_ANALYTICS__SAMPLE_DATASET.PUBLIC.retail_analytics_sales sa\njoin AMAZON_VENDOR_ANALYTICS__SAMPLE_DATASET.PUBLIC.retail_analytics_traffic tr\nusing (date, asin, program, period, distributor_view)\njoin AMAZON_VENDOR_ANALYTICS__SAMPLE_DATASET.PUBLIC.retail_analytics_inventory inv\nusing (date, asin, program, period, distributor_view)\njoin AMAZON_VENDOR_ANALYTICS__SAMPLE_DATASET.PUBLIC.retail_analytics_net_ppm ppm\nusing (date, asin, program, period, distributor_view)\n\nwhere date >= to_date('2022-02-06','YYYY-MM-DD') -30\nand distributor_view = 'Manufacturing'\nand period = 'DAILY' \n\ngroup by 1, 2, 6, 8\norder by 1 desc\n",
        "error_info": null
    },
    {
        "instance_id": "sf035",
        "score": 1,
        "pred_sql": "WITH session_joins AS (\n    SELECT\n        ss.app_group_id,\n        ss.time AS ss_time,\n        ss.user_id\n    FROM\n        BRAZE_USER_EVENT_DEMO_DATASET.PUBLIC.users_behaviors_app_sessionstart_view ss\n        JOIN BRAZE_USER_EVENT_DEMO_DATASET.PUBLIC.users_behaviors_app_firstsession_view fs\n        ON ss.user_id = fs.user_id\n        AND ss.app_group_id = fs.app_group_id\n    WHERE\n        ss.time >= DATEDIFF(s, '1970-01-01', '2023-06-01') AND\n        ss.time < DATEDIFF(s, '1970-01-01', '2023-06-08')\n)\nSELECT\n    app_group_id,\n    DATE_TRUNC('day', DATEADD(s, ss_time, '1970-01-01')) AS session_start_day,\n    COUNT(\n        DISTINCT user_id\n    ) AS count_distinct_users\nFROM\n    session_joins\nGROUP BY\n    1, 2\nORDER BY\n    session_start_day;",
        "error_info": null
    },
    {
        "instance_id": "sf037",
        "score": 1,
        "pred_sql": "WITH joined_data AS (\n    SELECT poi.poi_id, poi.poi_name, addr.longitude, addr.latitude,\n           addr.number, addr.street_directional_prefix, addr.street,\n           addr.street_type, addr.street_directional_suffix,\n           addr.unit, addr.city, addr.state, addr.zip\n    FROM US_REAL_ESTATE.CYBERSYN.point_of_interest_index AS poi\n    JOIN US_REAL_ESTATE.CYBERSYN.point_of_interest_addresses_relationships AS map\n        ON (poi.poi_id = map.poi_id)\n    JOIN US_REAL_ESTATE.CYBERSYN.us_addresses AS addr\n        ON (map.address_id = addr.address_id)\n)\nSELECT home_depot.poi_id,\n       ST_DISTANCE(\n           ST_MAKEPOINT(home_depot.longitude, home_depot.latitude),\n           ST_MAKEPOINT(lowes.longitude, lowes.latitude)\n       ) / 1609 AS distance_miles\nFROM joined_data AS home_depot\nJOIN joined_data AS lowes\nWHERE home_depot.poi_name = 'The Home Depot'\n  AND lowes.poi_name = 'Lowe''s Home Improvement'\nQUALIFY ROW_NUMBER() OVER (PARTITION BY home_depot.poi_id ORDER BY distance_miles NULLS LAST) = 1;",
        "error_info": null
    },
    {
        "instance_id": "sf040",
        "score": 0,
        "pred_sql": "WITH zip_areas AS (\n    SELECT\n        geo.geo_id,\n        geo.geo_name AS zip,\n        states.related_geo_name AS state,\n        countries.related_geo_name AS country,\n        ST_AREA(TRY_TO_GEOGRAPHY(value)) AS area\n    FROM US_ADDRESSES__POI.CYBERSYN.geography_index AS geo\n    JOIN US_ADDRESSES__POI.CYBERSYN.geography_relationships AS states\n        ON (geo.geo_id = states.geo_id AND states.related_level = 'State')\n    JOIN US_ADDRESSES__POI.CYBERSYN.geography_relationships AS countries\n        ON (geo.geo_id = countries.geo_id AND countries.related_level = 'Country')\n    JOIN US_ADDRESSES__POI.CYBERSYN.geography_characteristics AS chars\n        ON (geo.geo_id = chars.geo_id AND chars.relationship_type = 'coordinates_geojson')\n    WHERE geo.level = 'CensusZipCodeTabulationArea'\n),\n\nzip_area_ranks AS (\n    SELECT\n        *,\n        ROW_NUMBER() OVER (PARTITION BY country, state ORDER BY area DESC, geo_id) AS zip_area_rank\n    FROM zip_areas\n)\n\nSELECT addr.number, addr.street, addr.street_type\nFROM US_ADDRESSES__POI.CYBERSYN..us_addresses AS addr\nJOIN zip_area_ranks AS areas\n    ON (addr.id_zip = areas.geo_id)\nWHERE addr.state = 'FL' AND areas.country = 'United States' AND areas.zip_area_rank = 1\nORDER BY LATITUDE DESC\nLIMIT 10;",
        "error_info": "001003 (42000): SQL compilation error:\nsyntax error line 26 at position 32 unexpected '.'."
    },
    {
        "instance_id": "sf041",
        "score": 1,
        "pred_sql": "with datetimes_ as ( --Grabbing standardized datetime data to which all data will be joined.\n        select *\n        from YES_ENERGY__SAMPLE_DATA.YES_ENERGY_SAMPLE.iso_market_times_sample\n        where iso = 'ERCOT'\n            and datetime = '2022-10-01' -- Setting date specifically for October 1st, 2022.\n),\n    prices_ as (\n        select *\n        from YES_ENERGY__SAMPLE_DATA.YES_ENERGY_SAMPLE.dart_prices_sample\n        where iso = 'E' --ISO code (E = ERCOT).\n            and objectid = 10000697078 --Price node unique numeric id.\n),\n    load_forc_ as ( --Load forecast data. To find datatypes, use the v_data_catalog_basic view to get the datatypeid and storage table in which the data is located.\n        select *\n        from YES_ENERGY__SAMPLE_DATA.YES_ENERGY_SAMPLE.ts_forecast_sample\n        where datatypeid = 19060\n            and objectid = 10000712973\n),\n    load_ as ( --Real time load data.\n        select *\n        from YES_ENERGY__SAMPLE_DATA.YES_ENERGY_SAMPLE.dart_loads_sample\n        where objectid = 10000712973\n),\n    wind_gen_forc_ as ( --Wind generation forecast data.\n        select *\n        from YES_ENERGY__SAMPLE_DATA.YES_ENERGY_SAMPLE.ts_forecast_sample\n        where datatypeid = 9285\n           and objectid = 10000712973\n),\n    wind_gen_ as ( --Real time wind data.\n        select trunc(dateadd('second', 3599, datetime), 'hour') datetime --Converts the hourly rollup of 5 min data to hour ending (the 5 min are already interval ending themselves; just needs to be done for Snowflake).\n              ,avg(value) wind_gen --Raw real time wind generation data is reported at the 5 min granularity.\n        from YES_ENERGY__SAMPLE_DATA.YES_ENERGY_SAMPLE.ts_gen_sample\n        where datatypeid = 16\n            and objectid = 10000712973\n        group by all\n),\n    solar_gen_forc_ as ( --Solar generation forecast data.\n        select *\n        from YES_ENERGY__SAMPLE_DATA.YES_ENERGY_SAMPLE.ts_forecast_sample\n        where datatypeid = 662\n            and objectid = 10000712973\n),\n    solar_gen_ as ( --Real time solar generation data.\n        select trunc(dateadd('second', 3599, datetime), 'hour') datetime --Converts the hourly rollup of 5 min data to hour ending (the 5 min are already interval ending themselves; just needs to be done for Snowflake).\n              ,avg(value) solar_gen --Raw real time solar generation data is reported at the 5 min granularity.\n        from YES_ENERGY__SAMPLE_DATA.YES_ENERGY_SAMPLE.ts_gen_sample\n        where datatypeid = 650\n            and objectid = 10000712973\n        group by all\n),\n    combined_wide_data_ as ( --Combining the datatypes from above and grabbing only a subset of the columns. You can grab / \"preserve\" more columns such as the datatypeids from above by updating the code.\n        select mt.iso --Datetime attributes.\n              ,mt.datetime\n              ,mt.timezone              \n              ,mt.datetime_utc\n              ,mt.onpeak\n              ,mt.offpeak\n              ,mt.wepeak\n              ,mt.wdpeak\n              ,mt.marketday\n              ,ob1.objectname price_node_name --Object for the price data.\n              ,pr.objectid price_node_id\n              ,pr.dalmp\n              ,pr.rtlmp\n              ,ob2.objectname load_zone_name --Object for the ISO-wide load and generation data. You can also associate this object explicitly with each of the subsequent datatypes by updating the code.\n              ,lf.objectid load_zone_id\n              ,lf.value load_forecast\n              ,lf.publishdate load_forecast_publish_date            \n              ,ld.rtload\n              ,wf.value wind_gen_forecast\n              ,wf.publishdate wind_gen_forecast_publish_date\n              ,wg.wind_gen\n              ,sf.value solar_gen_forecast\n              ,sf.publishdate solar_gen_forecast_publish_date\n              ,sg.solar_gen\n              ,load_forecast - wind_gen_forecast - solar_gen_forecast net_load_forecast --Easily calculate additional columns / features such as net load (load minus renewable generation).\n              ,ld.rtload - wg.wind_gen - sg.solar_gen net_load_real_time --Second calculated feature for real time net load.\n        from datetimes_ mt\n        inner join prices_ pr\n            on (mt.datetime = pr.datetime)\n        inner join load_forc_ lf\n            on (mt.datetime = lf.datetime)\n        inner join load_ ld\n            on (mt.datetime = ld.datetime)    \n        inner join wind_gen_forc_ wf\n            on (mt.datetime = wf.datetime)\n        inner join wind_gen_ wg\n            on (mt.datetime = wg.datetime)    \n        inner join solar_gen_forc_ sf\n            on (mt.datetime = sf.datetime)\n        inner join solar_gen_ sg\n            on (mt.datetime = sg.datetime)\n        inner join YES_ENERGY__SAMPLE_DATA.YES_ENERGY_SAMPLE.ds_object_list_sample ob1\n            on (pr.objectid = ob1.objectid)\n        inner join YES_ENERGY__SAMPLE_DATA.YES_ENERGY_SAMPLE.ds_object_list_sample ob2\n            on (lf.objectid = ob2.objectid)             \n)\nselect *\nfrom combined_wide_data_\norder by datetime asc;\n",
        "error_info": null
    },
    {
        "instance_id": "sf044",
        "score": 1,
        "pred_sql": "WITH ytd_performance AS (\n  SELECT\n    ticker,\n    MIN(date) OVER (PARTITION BY ticker) AS start_of_year_date,\n    FIRST_VALUE(value) OVER (PARTITION BY ticker ORDER BY date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS start_of_year_price,\n    MAX(date) OVER (PARTITION BY ticker) AS latest_date,\n    LAST_VALUE(value) OVER (PARTITION BY ticker ORDER BY date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS latest_price\n  FROM FINANCE__ECONOMICS.CYBERSYN.stock_price_timeseries\n  WHERE\n    ticker IN ('AAPL', 'MSFT', 'AMZN', 'GOOGL', 'META', 'TSLA', 'NVDA')\n    AND date BETWEEN DATE '2024-01-01' AND DATE '2024-06-30'  -- Adjusted to cover only from the start of 2024 to the end of June 2024\n    AND variable_name = 'Post-Market Close'\n)\nSELECT\n  ticker,\n  (latest_price - start_of_year_price) / start_of_year_price * 100 AS percentage_change_ytd\nFROM\n  ytd_performance\nGROUP BY\n  ticker, start_of_year_date, start_of_year_price, latest_date, latest_price\nORDER BY percentage_change_ytd DESC;",
        "error_info": null
    }
]